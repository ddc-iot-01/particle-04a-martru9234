
c:/Users/IoTPa/Documents/Brian/Particle/PM25_Test/target/1.5.0/argon/PM25_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5a80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003e32c  000d5a84  0001e32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000440  2003e3b0  2003e3b0  0002e3b0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5b08  000d5b08  00025b08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5b30  000d5b30  00025b30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bd54c  00000000  00000000  00025b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ec03  00000000  00000000  000e3080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018bf9  00000000  00000000  000f1c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001fa8  00000000  00000000  0010a87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003c60  00000000  00000000  0010c824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000339c4  00000000  00000000  00110484  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000246da  00000000  00000000  00143e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101597  00000000  00000000  00168522  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bc88  00000000  00000000  00269abc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fa1f 	bl	d5470 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fa24 	bl	d5486 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e32c 	.word	0x2003e32c
   d4048:	000d5a84 	.word	0x000d5a84
   d404c:	2003e3b0 	.word	0x2003e3b0
   d4050:	2003e3b0 	.word	0x2003e3b0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fc8d 	bl	d4978 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5a74 	.word	0x000d5a74
   d4080:	000d5a34 	.word	0x000d5a34

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b886 	b.w	d4194 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8ab 	bl	d41e4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bc33 	b.w	d48fc <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 baf1 	b.w	d467c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 baef 	b.w	d467c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_Z12print_resultPKct>:
                     "PM1.0 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM2.5 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
   d40ae:	b538      	push	{r3, r4, r5, lr}
   d40b0:	460d      	mov	r5, r1
    if (NULL == str) {
   d40b2:	4604      	mov	r4, r0
   d40b4:	b180      	cbz	r0, d40d8 <_Z12print_resultPKct+0x2a>
        return ERROR_PARAM;
    }
    Serial.print(str);
   d40b6:	f000 fd5f 	bl	d4b78 <_Z16_fetch_usbserialv>
   d40ba:	4621      	mov	r1, r4
   d40bc:	f000 fb90 	bl	d47e0 <_ZN5Print5printEPKc>
    Serial.println(value);
   d40c0:	f000 fd5a 	bl	d4b78 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d40c4:	220a      	movs	r2, #10
   d40c6:	4604      	mov	r4, r0
   d40c8:	4629      	mov	r1, r5
   d40ca:	f000 fba6 	bl	d481a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d40ce:	4620      	mov	r0, r4
   d40d0:	f000 fb8d 	bl	d47ee <_ZN5Print7printlnEv>
    return NO_ERROR1;
   d40d4:	2000      	movs	r0, #0
   d40d6:	bd38      	pop	{r3, r4, r5, pc}
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
    if (NULL == str) {
        return ERROR_PARAM;
   d40d8:	f04f 30ff 	mov.w	r0, #4294967295
    }
    Serial.print(str);
    Serial.println(value);
    return NO_ERROR1;
}
   d40dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40e0 <_Z12parse_resultPh>:

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
   d40e0:	b570      	push	{r4, r5, r6, lr}
    uint16_t value = 0;
    if (NULL == data) {
   d40e2:	4605      	mov	r5, r0
   d40e4:	b178      	cbz	r0, d4106 <_Z12parse_resultPh+0x26>
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
   d40e6:	4e09      	ldr	r6, [pc, #36]	; (d410c <_Z12parse_resultPh+0x2c>)
   d40e8:	2400      	movs	r4, #0
   d40ea:	192b      	adds	r3, r5, r4
   d40ec:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
   d40f0:	7899      	ldrb	r1, [r3, #2]
   d40f2:	78db      	ldrb	r3, [r3, #3]
   d40f4:	3402      	adds	r4, #2
   d40f6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d40fa:	f7ff ffd8 	bl	d40ae <_Z12print_resultPKct>
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
   d40fe:	2c0e      	cmp	r4, #14
   d4100:	d1f3      	bne.n	d40ea <_Z12parse_resultPh+0xa>
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
    }
    return NO_ERROR1;
   d4102:	2000      	movs	r0, #0
   d4104:	bd70      	pop	{r4, r5, r6, pc}

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
   d4106:	f04f 30ff 	mov.w	r0, #4294967295
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
    }
    return NO_ERROR1;
}
   d410a:	bd70      	pop	{r4, r5, r6, pc}
   d410c:	2003e32c 	.word	0x2003e32c

000d4110 <_Z18parse_result_valuePh>:

HM330XErrorCode parse_result_value(uint8_t* data) {
   d4110:	b538      	push	{r3, r4, r5, lr}
    if (NULL == data) {
   d4112:	4605      	mov	r5, r0
   d4114:	b3a0      	cbz	r0, d4180 <_Z18parse_result_valuePh+0x70>
   d4116:	2400      	movs	r4, #0
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
        Serial.print(data[i], HEX);
   d4118:	f000 fd2e 	bl	d4b78 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d411c:	2210      	movs	r2, #16
   d411e:	5d29      	ldrb	r1, [r5, r4]
   d4120:	f000 fb7b 	bl	d481a <_ZN5Print11printNumberEmh>
        Serial.print("  ");
   d4124:	f000 fd28 	bl	d4b78 <_Z16_fetch_usbserialv>
   d4128:	4917      	ldr	r1, [pc, #92]	; (d4188 <_Z18parse_result_valuePh+0x78>)
   d412a:	f000 fb59 	bl	d47e0 <_ZN5Print5printEPKc>
        if ((0 == (i) % 5) || (0 == i)) {
   d412e:	2305      	movs	r3, #5
   d4130:	fb94 f3f3 	sdiv	r3, r4, r3
   d4134:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4138:	429c      	cmp	r4, r3
   d413a:	d000      	beq.n	d413e <_Z18parse_result_valuePh+0x2e>
   d413c:	b924      	cbnz	r4, d4148 <_Z18parse_result_valuePh+0x38>
            Serial.println("");
   d413e:	f000 fd1b 	bl	d4b78 <_Z16_fetch_usbserialv>
   d4142:	4912      	ldr	r1, [pc, #72]	; (d418c <_Z18parse_result_valuePh+0x7c>)
   d4144:	f000 fb5f 	bl	d4806 <_ZN5Print7printlnEPKc>

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
   d4148:	3401      	adds	r4, #1
   d414a:	2c1c      	cmp	r4, #28
   d414c:	d1e4      	bne.n	d4118 <_Z18parse_result_valuePh+0x8>
   d414e:	1e6a      	subs	r2, r5, #1
   d4150:	f105 011b 	add.w	r1, r5, #27
   d4154:	2300      	movs	r3, #0
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
        sum += data[i];
   d4156:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d415a:	4403      	add	r3, r0
        if ((0 == (i) % 5) || (0 == i)) {
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d415c:	428a      	cmp	r2, r1
        sum += data[i];
   d415e:	b2db      	uxtb	r3, r3
        if ((0 == (i) % 5) || (0 == i)) {
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d4160:	d1f9      	bne.n	d4156 <_Z18parse_result_valuePh+0x46>
        sum += data[i];
    }
    if (sum != data[28]) {
   d4162:	7f2a      	ldrb	r2, [r5, #28]
   d4164:	429a      	cmp	r2, r3
   d4166:	d004      	beq.n	d4172 <_Z18parse_result_valuePh+0x62>
        Serial.println("wrong checkSum!!!!");
   d4168:	f000 fd06 	bl	d4b78 <_Z16_fetch_usbserialv>
   d416c:	4908      	ldr	r1, [pc, #32]	; (d4190 <_Z18parse_result_valuePh+0x80>)
   d416e:	f000 fb4a 	bl	d4806 <_ZN5Print7printlnEPKc>
    }
    Serial.println("");
   d4172:	f000 fd01 	bl	d4b78 <_Z16_fetch_usbserialv>
   d4176:	4905      	ldr	r1, [pc, #20]	; (d418c <_Z18parse_result_valuePh+0x7c>)
   d4178:	f000 fb45 	bl	d4806 <_ZN5Print7printlnEPKc>
    return NO_ERROR1;
   d417c:	2000      	movs	r0, #0
   d417e:	bd38      	pop	{r3, r4, r5, pc}
    return NO_ERROR1;
}

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
   d4180:	f04f 30ff 	mov.w	r0, #4294967295
    if (sum != data[28]) {
        Serial.println("wrong checkSum!!!!");
    }
    Serial.println("");
    return NO_ERROR1;
}
   d4184:	bd38      	pop	{r3, r4, r5, pc}
   d4186:	bf00      	nop
   d4188:	000d550c 	.word	0x000d550c
   d418c:	000d582f 	.word	0x000d582f
   d4190:	000d550f 	.word	0x000d550f

000d4194 <setup>:

/************Declare Variables*************/
int status;

void setup() {
   d4194:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d4196:	f000 fcef 	bl	d4b78 <_Z16_fetch_usbserialv>
   d419a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d419e:	f000 fcdf 	bl	d4b60 <_ZN9USBSerial5beginEl>
  delay(5000);
   d41a2:	f241 3088 	movw	r0, #5000	; 0x1388
   d41a6:	f000 fb6b 	bl	d4880 <delay>
  Serial.println("----------------------------------------------------------");
   d41aa:	f000 fce5 	bl	d4b78 <_Z16_fetch_usbserialv>
   d41ae:	4909      	ldr	r1, [pc, #36]	; (d41d4 <setup+0x40>)
   d41b0:	f000 fb29 	bl	d4806 <_ZN5Print7printlnEPKc>

  Serial.println("Serial start");
   d41b4:	f000 fce0 	bl	d4b78 <_Z16_fetch_usbserialv>
   d41b8:	4907      	ldr	r1, [pc, #28]	; (d41d8 <setup+0x44>)
   d41ba:	f000 fb24 	bl	d4806 <_ZN5Print7printlnEPKc>
  if (sensor.init()) {
   d41be:	4807      	ldr	r0, [pc, #28]	; (d41dc <setup+0x48>)
   d41c0:	f000 f88b 	bl	d42da <_ZN6HM330X4initEv>
   d41c4:	b128      	cbz	r0, d41d2 <setup+0x3e>
    Serial.println("HM330X init failed!!!");
   d41c6:	f000 fcd7 	bl	d4b78 <_Z16_fetch_usbserialv>
   d41ca:	4905      	ldr	r1, [pc, #20]	; (d41e0 <setup+0x4c>)
   d41cc:	f000 fb1b 	bl	d4806 <_ZN5Print7printlnEPKc>
   d41d0:	e7fe      	b.n	d41d0 <setup+0x3c>
   d41d2:	bd08      	pop	{r3, pc}
   d41d4:	000d5522 	.word	0x000d5522
   d41d8:	000d555d 	.word	0x000d555d
   d41dc:	2003e3b4 	.word	0x2003e3b4
   d41e0:	000d556a 	.word	0x000d556a

000d41e4 <loop>:
    while (1);
    }
}

void loop() {
   d41e4:	b510      	push	{r4, lr}

  if (sensor.read_sensor_value(buf, 29)) {
   d41e6:	221d      	movs	r2, #29
   d41e8:	491a      	ldr	r1, [pc, #104]	; (d4254 <loop+0x70>)
   d41ea:	481b      	ldr	r0, [pc, #108]	; (d4258 <loop+0x74>)
   d41ec:	f000 f880 	bl	d42f0 <_ZN6HM330X17read_sensor_valueEPhm>
   d41f0:	b120      	cbz	r0, d41fc <loop+0x18>
    Serial.println("HM330X read result failed!!!");
   d41f2:	f000 fcc1 	bl	d4b78 <_Z16_fetch_usbserialv>
   d41f6:	4919      	ldr	r1, [pc, #100]	; (d425c <loop+0x78>)
   d41f8:	f000 fb05 	bl	d4806 <_ZN5Print7printlnEPKc>
    }
  Serial.println("Starting Display");
  parse_result_value(buf);
   d41fc:	4c15      	ldr	r4, [pc, #84]	; (d4254 <loop+0x70>)
void loop() {

  if (sensor.read_sensor_value(buf, 29)) {
    Serial.println("HM330X read result failed!!!");
    }
  Serial.println("Starting Display");
   d41fe:	f000 fcbb 	bl	d4b78 <_Z16_fetch_usbserialv>
   d4202:	4917      	ldr	r1, [pc, #92]	; (d4260 <loop+0x7c>)
   d4204:	f000 faff 	bl	d4806 <_ZN5Print7printlnEPKc>
  parse_result_value(buf);
   d4208:	4620      	mov	r0, r4
   d420a:	f7ff ff81 	bl	d4110 <_Z18parse_result_valuePh>
  Serial.println("Printing Concentrations");
   d420e:	f000 fcb3 	bl	d4b78 <_Z16_fetch_usbserialv>
   d4212:	4914      	ldr	r1, [pc, #80]	; (d4264 <loop+0x80>)
   d4214:	f000 faf7 	bl	d4806 <_ZN5Print7printlnEPKc>
  parse_result(buf);
   d4218:	4620      	mov	r0, r4
   d421a:	f7ff ff61 	bl	d40e0 <_Z12parse_resultPh>
  Serial.println("PM2.5 Data");
   d421e:	f000 fcab 	bl	d4b78 <_Z16_fetch_usbserialv>
   d4222:	4911      	ldr	r1, [pc, #68]	; (d4268 <loop+0x84>)
   d4224:	f000 faef 	bl	d4806 <_ZN5Print7printlnEPKc>
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4228:	7b63      	ldrb	r3, [r4, #13]
   d422a:	7b21      	ldrb	r1, [r4, #12]
   d422c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d4230:	4b0e      	ldr	r3, [pc, #56]	; (d426c <loop+0x88>)
   d4232:	6019      	str	r1, [r3, #0]
    print_result(str[6 - 1], PM25);
   d4234:	4b0e      	ldr	r3, [pc, #56]	; (d4270 <loop+0x8c>)
   d4236:	6958      	ldr	r0, [r3, #20]
   d4238:	f7ff ff39 	bl	d40ae <_Z12print_resultPKct>
  Serial.println("");
   d423c:	f000 fc9c 	bl	d4b78 <_Z16_fetch_usbserialv>
   d4240:	490c      	ldr	r1, [pc, #48]	; (d4274 <loop+0x90>)
   d4242:	f000 fae0 	bl	d4806 <_ZN5Print7printlnEPKc>
  delay(5000);
   d4246:	f241 3088 	movw	r0, #5000	; 0x1388
}
   d424a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  parse_result(buf);
  Serial.println("PM2.5 Data");
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
    print_result(str[6 - 1], PM25);
  Serial.println("");
  delay(5000);
   d424e:	f000 bb17 	b.w	d4880 <delay>
   d4252:	bf00      	nop
   d4254:	2003e3bc 	.word	0x2003e3bc
   d4258:	2003e3b4 	.word	0x2003e3b4
   d425c:	000d5580 	.word	0x000d5580
   d4260:	000d559d 	.word	0x000d559d
   d4264:	000d55ae 	.word	0x000d55ae
   d4268:	000d55c6 	.word	0x000d55c6
   d426c:	2003e3b8 	.word	0x2003e3b8
   d4270:	2003e32c 	.word	0x2003e32c
   d4274:	000d582f 	.word	0x000d582f

000d4278 <_GLOBAL__sub_I_sensor>:
}
   d4278:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d427a:	f000 f873 	bl	d4364 <HAL_Pin_Map>
//#include <Particle.h>
#include <Seeed_HM330X.h>
#include <Wire.h>

/****************SetUp HM330X**************/
HM330X sensor;
   d427e:	2140      	movs	r1, #64	; 0x40
   d4280:	4802      	ldr	r0, [pc, #8]	; (d428c <_GLOBAL__sub_I_sensor+0x14>)
  Serial.println("PM2.5 Data");
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
    print_result(str[6 - 1], PM25);
  Serial.println("");
  delay(5000);
}
   d4282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//#include <Particle.h>
#include <Seeed_HM330X.h>
#include <Wire.h>

/****************SetUp HM330X**************/
HM330X sensor;
   d4286:	f000 b81f 	b.w	d42c8 <_ZN6HM330XC1Eh>
   d428a:	bf00      	nop
   d428c:	2003e3b4 	.word	0x2003e3b4

000d4290 <_ZN13I2COperations12set_iic_addrEh>:
/**
    @brief change the I2C address from default.
    @param IIC_ADDR: I2C address to be set
*/
void I2COperations::set_iic_addr(uint8_t IIC_ADDR) {
    _IIC_ADDR = IIC_ADDR;
   d4290:	7001      	strb	r1, [r0, #0]
   d4292:	4770      	bx	lr

000d4294 <_ZN13I2COperations12IIC_SEND_CMDEh>:
}

HM330XErrorCode I2COperations::IIC_SEND_CMD(uint8_t CMD) {
   d4294:	b538      	push	{r3, r4, r5, lr}
   d4296:	4605      	mov	r5, r0
   d4298:	460c      	mov	r4, r1
    Wire.beginTransmission(_IIC_ADDR);
   d429a:	f000 ff4b 	bl	d5134 <_Z19__fetch_global_Wirev>
   d429e:	7829      	ldrb	r1, [r5, #0]
   d42a0:	f000 fd83 	bl	d4daa <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(CMD);
   d42a4:	f000 ff46 	bl	d5134 <_Z19__fetch_global_Wirev>
   d42a8:	6803      	ldr	r3, [r0, #0]
   d42aa:	4621      	mov	r1, r4
   d42ac:	689b      	ldr	r3, [r3, #8]
   d42ae:	4798      	blx	r3
    byte ret = Wire.endTransmission();
   d42b0:	f000 ff40 	bl	d5134 <_Z19__fetch_global_Wirev>
   d42b4:	f000 fd81 	bl	d4dba <_ZN7TwoWire15endTransmissionEv>
    if (ret == 0) {
   d42b8:	2800      	cmp	r0, #0
        return NO_ERROR1;
    } else {
        return ERROR_COMM;
    }
}
   d42ba:	bf14      	ite	ne
   d42bc:	f06f 0001 	mvnne.w	r0, #1
   d42c0:	2000      	moveq	r0, #0
   d42c2:	bd38      	pop	{r3, r4, r5, pc}

000d42c4 <_GLOBAL__sub_I__ZN13I2COperations14IIC_write_byteEhh>:
   d42c4:	f000 b84e 	b.w	d4364 <HAL_Pin_Map>

000d42c8 <_ZN6HM330XC1Eh>:
    THE SOFTWARE.
*/

#include "Seeed_HM330X.h"

HM330X::HM330X(uint8_t IIC_ADDR) {
   d42c8:	b510      	push	{r4, lr}
   d42ca:	4604      	mov	r4, r0
    set_iic_addr(IIC_ADDR);
   d42cc:	f7ff ffe0 	bl	d4290 <_ZN13I2COperations12set_iic_addrEh>
}
   d42d0:	4620      	mov	r0, r4
   d42d2:	bd10      	pop	{r4, pc}

000d42d4 <_ZN6HM330X11select_commEv>:

HM330XErrorCode HM330X::select_comm() {
    return IIC_SEND_CMD(SELECT_COMM_CMD);
   d42d4:	2188      	movs	r1, #136	; 0x88
   d42d6:	f7ff bfdd 	b.w	d4294 <_ZN13I2COperations12IIC_SEND_CMDEh>

000d42da <_ZN6HM330X4initEv>:
}

HM330XErrorCode HM330X::init() {
   d42da:	b510      	push	{r4, lr}
   d42dc:	4604      	mov	r4, r0
    Wire.begin();
   d42de:	f000 ff29 	bl	d5134 <_Z19__fetch_global_Wirev>
   d42e2:	f000 fd2b 	bl	d4d3c <_ZN7TwoWire5beginEv>
    return select_comm();
   d42e6:	4620      	mov	r0, r4
}
   d42e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return IIC_SEND_CMD(SELECT_COMM_CMD);
}

HM330XErrorCode HM330X::init() {
    Wire.begin();
    return select_comm();
   d42ec:	f7ff bff2 	b.w	d42d4 <_ZN6HM330X11select_commEv>

000d42f0 <_ZN6HM330X17read_sensor_valueEPhm>:
}

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
   d42f0:	b570      	push	{r4, r5, r6, lr}
   d42f2:	460c      	mov	r4, r1
   d42f4:	4615      	mov	r5, r2
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
   d42f6:	f000 ff1d 	bl	d5134 <_Z19__fetch_global_Wirev>
   d42fa:	221d      	movs	r2, #29
   d42fc:	2140      	movs	r1, #64	; 0x40
   d42fe:	f000 fd51 	bl	d4da4 <_ZN7TwoWire11requestFromEhj>
   d4302:	260b      	movs	r6, #11
    while (data_len != Wire.available()) {
   d4304:	f000 ff16 	bl	d5134 <_Z19__fetch_global_Wirev>
   d4308:	6803      	ldr	r3, [r0, #0]
   d430a:	691b      	ldr	r3, [r3, #16]
   d430c:	4798      	blx	r3
   d430e:	42a8      	cmp	r0, r5
   d4310:	d005      	beq.n	d431e <_ZN6HM330X17read_sensor_valueEPhm+0x2e>
        time_out_count++;
        if (time_out_count > 10) {
   d4312:	3e01      	subs	r6, #1
   d4314:	d00e      	beq.n	d4334 <_ZN6HM330X17read_sensor_valueEPhm+0x44>
            return ERROR_COMM;
        }
        delay(1);
   d4316:	2001      	movs	r0, #1
   d4318:	f000 fab2 	bl	d4880 <delay>

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
   d431c:	e7f2      	b.n	d4304 <_ZN6HM330X17read_sensor_valueEPhm+0x14>
   d431e:	4425      	add	r5, r4
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d4320:	42a5      	cmp	r5, r4
   d4322:	d00a      	beq.n	d433a <_ZN6HM330X17read_sensor_valueEPhm+0x4a>
        data[i] = Wire.read();
   d4324:	f000 ff06 	bl	d5134 <_Z19__fetch_global_Wirev>
   d4328:	6803      	ldr	r3, [r0, #0]
   d432a:	695b      	ldr	r3, [r3, #20]
   d432c:	4798      	blx	r3
   d432e:	f804 0b01 	strb.w	r0, [r4], #1
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d4332:	e7f5      	b.n	d4320 <_ZN6HM330X17read_sensor_valueEPhm+0x30>
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
        time_out_count++;
        if (time_out_count > 10) {
            return ERROR_COMM;
   d4334:	f06f 0001 	mvn.w	r0, #1
   d4338:	bd70      	pop	{r4, r5, r6, pc}
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
        data[i] = Wire.read();
    }
    return ret;
   d433a:	2000      	movs	r0, #0
}
   d433c:	bd70      	pop	{r4, r5, r6, pc}

000d433e <_GLOBAL__sub_I__ZN6HM330XC2Eh>:
   d433e:	f000 b811 	b.w	d4364 <HAL_Pin_Map>
	...

000d4344 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <netdb_freeaddrinfo+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	689b      	ldr	r3, [r3, #8]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030268 	.word	0x00030268

000d4354 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <netdb_getaddrinfo+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	68db      	ldr	r3, [r3, #12]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030268 	.word	0x00030268

000d4364 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_Pin_Map+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	681b      	ldr	r3, [r3, #0]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	0003022c 	.word	0x0003022c

000d4374 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_RNG_GetRandomNumber+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	685b      	ldr	r3, [r3, #4]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030218 	.word	0x00030218

000d4384 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	695b      	ldr	r3, [r3, #20]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030218 	.word	0x00030218

000d4394 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <os_thread_is_current+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	689b      	ldr	r3, [r3, #8]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030248 	.word	0x00030248

000d43a4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <os_thread_join+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	691b      	ldr	r3, [r3, #16]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030248 	.word	0x00030248

000d43b4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <os_thread_cleanup+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	695b      	ldr	r3, [r3, #20]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030248 	.word	0x00030248

000d43c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <os_mutex_recursive_create+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030248 	.word	0x00030248

000d43d4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <os_mutex_recursive_destroy+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030248 	.word	0x00030248

000d43e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <inet_inet_ntop+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	695b      	ldr	r3, [r3, #20]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030264 	.word	0x00030264

000d43f4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USART_Init+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	681b      	ldr	r3, [r3, #0]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003023c 	.word	0x0003023c

000d4404 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_USART_Write_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	68db      	ldr	r3, [r3, #12]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003023c 	.word	0x0003023c

000d4414 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_USART_Available_Data+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	691b      	ldr	r3, [r3, #16]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003023c 	.word	0x0003023c

000d4424 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USART_Read_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	695b      	ldr	r3, [r3, #20]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003023c 	.word	0x0003023c

000d4434 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USART_Peek_Data+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	699b      	ldr	r3, [r3, #24]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003023c 	.word	0x0003023c

000d4444 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_USART_Flush_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	69db      	ldr	r3, [r3, #28]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003023c 	.word	0x0003023c

000d4454 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_USART_Available_Data_For_Write+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003023c 	.word	0x0003023c

000d4464 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_I2C_Begin+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	68db      	ldr	r3, [r3, #12]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030228 	.word	0x00030228

000d4474 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_I2C_Begin_Transmission+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	699b      	ldr	r3, [r3, #24]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030228 	.word	0x00030228

000d4484 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_I2C_End_Transmission+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	69db      	ldr	r3, [r3, #28]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030228 	.word	0x00030228

000d4494 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_I2C_Write_Data+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6a1b      	ldr	r3, [r3, #32]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030228 	.word	0x00030228

000d44a4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_I2C_Available_Data+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030228 	.word	0x00030228

000d44b4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_I2C_Read_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030228 	.word	0x00030228

000d44c4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_I2C_Peek_Data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030228 	.word	0x00030228

000d44d4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_I2C_Flush_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030228 	.word	0x00030228

000d44e4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_I2C_Init+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030228 	.word	0x00030228

000d44f4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_I2C_Request_Data_Ex+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030228 	.word	0x00030228

000d4504 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_USB_USART_Init+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	681b      	ldr	r3, [r3, #0]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003024c 	.word	0x0003024c

000d4514 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_USB_USART_Begin+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	685b      	ldr	r3, [r3, #4]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003024c 	.word	0x0003024c

000d4524 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_USB_USART_Available_Data+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	691b      	ldr	r3, [r3, #16]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	0003024c 	.word	0x0003024c

000d4534 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	695b      	ldr	r3, [r3, #20]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003024c 	.word	0x0003024c

000d4544 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_USB_USART_Receive_Data+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	699b      	ldr	r3, [r3, #24]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003024c 	.word	0x0003024c

000d4554 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_USB_USART_Send_Data+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	69db      	ldr	r3, [r3, #28]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003024c 	.word	0x0003024c

000d4564 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_USB_USART_Flush_Data+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6a1b      	ldr	r3, [r3, #32]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003024c 	.word	0x0003024c

000d4574 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <set_system_mode+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	685b      	ldr	r3, [r3, #4]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030220 	.word	0x00030220

000d4584 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <system_delay_ms+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	695b      	ldr	r3, [r3, #20]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030220 	.word	0x00030220

000d4594 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b03      	ldr	r3, [pc, #12]	; (d45a4 <system_ctrl_set_app_request_handler+0x10>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d459e:	9301      	str	r3, [sp, #4]
   d45a0:	bd08      	pop	{r3, pc}
   d45a2:	0000      	.short	0x0000
   d45a4:	00030220 	.word	0x00030220

000d45a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b03      	ldr	r3, [pc, #12]	; (d45b8 <system_ctrl_set_result+0x10>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45b2:	9301      	str	r3, [sp, #4]
   d45b4:	bd08      	pop	{r3, pc}
   d45b6:	0000      	.short	0x0000
   d45b8:	00030220 	.word	0x00030220

000d45bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <network_connect+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	685b      	ldr	r3, [r3, #4]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030240 	.word	0x00030240

000d45cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <network_connecting+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	689b      	ldr	r3, [r3, #8]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030240 	.word	0x00030240

000d45dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <network_disconnect+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	68db      	ldr	r3, [r3, #12]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030240 	.word	0x00030240

000d45ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <network_ready+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	691b      	ldr	r3, [r3, #16]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030240 	.word	0x00030240

000d45fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <network_on+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	695b      	ldr	r3, [r3, #20]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030240 	.word	0x00030240

000d460c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <network_off+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	699b      	ldr	r3, [r3, #24]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030240 	.word	0x00030240

000d461c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <network_listen+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	69db      	ldr	r3, [r3, #28]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030240 	.word	0x00030240

000d462c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <network_listening+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	6a1b      	ldr	r3, [r3, #32]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030240 	.word	0x00030240

000d463c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <network_set_listen_timeout+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030240 	.word	0x00030240

000d464c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <network_get_listen_timeout+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030240 	.word	0x00030240

000d465c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030244 	.word	0x00030244

000d466c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <malloc+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	681b      	ldr	r3, [r3, #0]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003021c 	.word	0x0003021c

000d467c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <free+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	685b      	ldr	r3, [r3, #4]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003021c 	.word	0x0003021c

000d468c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d468c:	2200      	movs	r2, #0
   d468e:	4611      	mov	r1, r2
   d4690:	6840      	ldr	r0, [r0, #4]
   d4692:	f7ff bfcb 	b.w	d462c <network_listening>

000d4696 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4696:	2200      	movs	r2, #0
   d4698:	4611      	mov	r1, r2
   d469a:	6840      	ldr	r0, [r0, #4]
   d469c:	f7ff bfd6 	b.w	d464c <network_get_listen_timeout>

000d46a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46a0:	2200      	movs	r2, #0
   d46a2:	6840      	ldr	r0, [r0, #4]
   d46a4:	f7ff bfca 	b.w	d463c <network_set_listen_timeout>

000d46a8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46a8:	2200      	movs	r2, #0
   d46aa:	f081 0101 	eor.w	r1, r1, #1
   d46ae:	6840      	ldr	r0, [r0, #4]
   d46b0:	f7ff bfb4 	b.w	d461c <network_listen>

000d46b4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46b4:	2300      	movs	r3, #0
   d46b6:	461a      	mov	r2, r3
   d46b8:	4619      	mov	r1, r3
   d46ba:	6840      	ldr	r0, [r0, #4]
   d46bc:	f7ff bfa6 	b.w	d460c <network_off>

000d46c0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46c0:	2300      	movs	r3, #0
   d46c2:	461a      	mov	r2, r3
   d46c4:	4619      	mov	r1, r3
   d46c6:	6840      	ldr	r0, [r0, #4]
   d46c8:	f7ff bf98 	b.w	d45fc <network_on>

000d46cc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46cc:	2200      	movs	r2, #0
   d46ce:	4611      	mov	r1, r2
   d46d0:	6840      	ldr	r0, [r0, #4]
   d46d2:	f7ff bf8b 	b.w	d45ec <network_ready>

000d46d6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46d6:	2200      	movs	r2, #0
   d46d8:	4611      	mov	r1, r2
   d46da:	6840      	ldr	r0, [r0, #4]
   d46dc:	f7ff bf76 	b.w	d45cc <network_connecting>

000d46e0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46e0:	2200      	movs	r2, #0
   d46e2:	2102      	movs	r1, #2
   d46e4:	6840      	ldr	r0, [r0, #4]
   d46e6:	f7ff bf79 	b.w	d45dc <network_disconnect>

000d46ea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46ea:	2300      	movs	r3, #0
   d46ec:	461a      	mov	r2, r3
   d46ee:	6840      	ldr	r0, [r0, #4]
   d46f0:	f7ff bf64 	b.w	d45bc <network_connect>

000d46f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46f4:	4b02      	ldr	r3, [pc, #8]	; (d4700 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46f6:	2203      	movs	r2, #3
   d46f8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46fa:	4a02      	ldr	r2, [pc, #8]	; (d4704 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46fc:	601a      	str	r2, [r3, #0]
   d46fe:	4770      	bx	lr
   d4700:	2003e3dc 	.word	0x2003e3dc
   d4704:	000d575c 	.word	0x000d575c

000d4708 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4708:	b510      	push	{r4, lr}
   d470a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d470c:	6800      	ldr	r0, [r0, #0]
   d470e:	b118      	cbz	r0, d4718 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4710:	f7ff ffb4 	bl	d467c <free>
            wakeupSource_ = nullptr;
   d4714:	2300      	movs	r3, #0
   d4716:	6023      	str	r3, [r4, #0]
   d4718:	bd10      	pop	{r4, pc}

000d471a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d471a:	b510      	push	{r4, lr}
   d471c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d471e:	f7ff fff3 	bl	d4708 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4722:	4620      	mov	r0, r4
   d4724:	bd10      	pop	{r4, pc}
	...

000d4728 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4728:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d472a:	4c09      	ldr	r4, [pc, #36]	; (d4750 <_GLOBAL__sub_I_System+0x28>)
   d472c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d472e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4732:	6020      	str	r0, [r4, #0]
   d4734:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4736:	71a0      	strb	r0, [r4, #6]
   d4738:	8120      	strh	r0, [r4, #8]
   d473a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d473c:	f7ff ff1a 	bl	d4574 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4740:	4620      	mov	r0, r4
   d4742:	4a04      	ldr	r2, [pc, #16]	; (d4754 <_GLOBAL__sub_I_System+0x2c>)
   d4744:	4904      	ldr	r1, [pc, #16]	; (d4758 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d474a:	f000 bd19 	b.w	d5180 <__aeabi_atexit>
   d474e:	bf00      	nop
   d4750:	2003e3e4 	.word	0x2003e3e4
   d4754:	2003e3b0 	.word	0x2003e3b0
   d4758:	000d471b 	.word	0x000d471b

000d475c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d475c:	b510      	push	{r4, lr}
   d475e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4760:	6800      	ldr	r0, [r0, #0]
   d4762:	b108      	cbz	r0, d4768 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4764:	f7ff fe36 	bl	d43d4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4768:	4620      	mov	r0, r4
   d476a:	bd10      	pop	{r4, pc}

000d476c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d476c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d476e:	4c06      	ldr	r4, [pc, #24]	; (d4788 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4770:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4772:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4774:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4776:	f7ff fe25 	bl	d43c4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d477a:	4620      	mov	r0, r4
   d477c:	4a03      	ldr	r2, [pc, #12]	; (d478c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d477e:	4904      	ldr	r1, [pc, #16]	; (d4790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4784:	f000 bcfc 	b.w	d5180 <__aeabi_atexit>
   d4788:	2003e3f0 	.word	0x2003e3f0
   d478c:	2003e3b0 	.word	0x2003e3b0
   d4790:	000d475d 	.word	0x000d475d

000d4794 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4796:	4606      	mov	r6, r0
   d4798:	460d      	mov	r5, r1
   d479a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d479c:	2400      	movs	r4, #0
  while (size--) {
   d479e:	42bd      	cmp	r5, r7
   d47a0:	d00c      	beq.n	d47bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47a2:	6833      	ldr	r3, [r6, #0]
   d47a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47a8:	689b      	ldr	r3, [r3, #8]
   d47aa:	4630      	mov	r0, r6
   d47ac:	4798      	blx	r3
     if (chunk>=0)
   d47ae:	2800      	cmp	r0, #0
   d47b0:	db01      	blt.n	d47b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47b2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d47b4:	e7f3      	b.n	d479e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47b6:	2c00      	cmp	r4, #0
   d47b8:	bf08      	it	eq
   d47ba:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d47bc:	4620      	mov	r0, r4
   d47be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47c0:	b570      	push	{r4, r5, r6, lr}
   d47c2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d47c4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d47c6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d47c8:	b149      	cbz	r1, d47de <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d47ca:	f000 fe8d 	bl	d54e8 <strlen>
   d47ce:	682b      	ldr	r3, [r5, #0]
   d47d0:	4602      	mov	r2, r0
   d47d2:	4621      	mov	r1, r4
   d47d4:	4628      	mov	r0, r5
   d47d6:	68db      	ldr	r3, [r3, #12]
    }
   d47d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d47dc:	4718      	bx	r3
    }
   d47de:	bd70      	pop	{r4, r5, r6, pc}

000d47e0 <_ZN5Print5printEPKc>:
   d47e0:	b508      	push	{r3, lr}
   d47e2:	f7ff ffed 	bl	d47c0 <_ZN5Print5writeEPKc>
   d47e6:	bd08      	pop	{r3, pc}

000d47e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d47e8:	6803      	ldr	r3, [r0, #0]
   d47ea:	689b      	ldr	r3, [r3, #8]
   d47ec:	4718      	bx	r3

000d47ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d47f0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d47f4:	f7ff fff8 	bl	d47e8 <_ZN5Print5printEc>
  n += print('\n');
   d47f8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d47fa:	4604      	mov	r4, r0
  n += print('\n');
   d47fc:	4628      	mov	r0, r5
   d47fe:	f7ff fff3 	bl	d47e8 <_ZN5Print5printEc>
  return n;
}
   d4802:	4420      	add	r0, r4
   d4804:	bd38      	pop	{r3, r4, r5, pc}

000d4806 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4806:	b538      	push	{r3, r4, r5, lr}
   d4808:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d480a:	f7ff ffd9 	bl	d47c0 <_ZN5Print5writeEPKc>
   d480e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4810:	4628      	mov	r0, r5
   d4812:	f7ff ffec 	bl	d47ee <_ZN5Print7printlnEv>
  return n;
}
   d4816:	4420      	add	r0, r4
   d4818:	bd38      	pop	{r3, r4, r5, pc}

000d481a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d481a:	b530      	push	{r4, r5, lr}
   d481c:	b08b      	sub	sp, #44	; 0x2c
   d481e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4820:	2100      	movs	r1, #0
   d4822:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4826:	2a01      	cmp	r2, #1
   d4828:	bf98      	it	ls
   d482a:	220a      	movls	r2, #10
   d482c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4830:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4834:	fb05 3312 	mls	r3, r5, r2, r3
   d4838:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d483c:	2b09      	cmp	r3, #9
   d483e:	bf94      	ite	ls
   d4840:	3330      	addls	r3, #48	; 0x30
   d4842:	3337      	addhi	r3, #55	; 0x37
   d4844:	b2db      	uxtb	r3, r3
   d4846:	4621      	mov	r1, r4
   d4848:	f804 3901 	strb.w	r3, [r4], #-1
   d484c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d484e:	2d00      	cmp	r5, #0
   d4850:	d1ee      	bne.n	d4830 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4852:	f7ff ffb5 	bl	d47c0 <_ZN5Print5writeEPKc>
}
   d4856:	b00b      	add	sp, #44	; 0x2c
   d4858:	bd30      	pop	{r4, r5, pc}
	...

000d485c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d485c:	4b01      	ldr	r3, [pc, #4]	; (d4864 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d485e:	4a02      	ldr	r2, [pc, #8]	; (d4868 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4860:	601a      	str	r2, [r3, #0]
   d4862:	4770      	bx	lr
   d4864:	2003e3f4 	.word	0x2003e3f4
   d4868:	000d57fb 	.word	0x000d57fb

000d486c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d486c:	4b02      	ldr	r3, [pc, #8]	; (d4878 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d486e:	681a      	ldr	r2, [r3, #0]
   d4870:	4b02      	ldr	r3, [pc, #8]	; (d487c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4872:	601a      	str	r2, [r3, #0]
   d4874:	4770      	bx	lr
   d4876:	bf00      	nop
   d4878:	2003e348 	.word	0x2003e348
   d487c:	2003e3f8 	.word	0x2003e3f8

000d4880 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4880:	2100      	movs	r1, #0
   d4882:	f7ff be7f 	b.w	d4584 <system_delay_ms>

000d4886 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4886:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4888:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d488a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d488c:	b113      	cbz	r3, d4894 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d488e:	2203      	movs	r2, #3
   d4890:	4601      	mov	r1, r0
   d4892:	4798      	blx	r3
    }
   d4894:	4620      	mov	r0, r4
   d4896:	bd10      	pop	{r4, pc}

000d4898 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4898:	b510      	push	{r4, lr}
   d489a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d489c:	f7ff fff3 	bl	d4886 <_ZNSt14_Function_baseD1Ev>
   d48a0:	4620      	mov	r0, r4
   d48a2:	bd10      	pop	{r4, pc}

000d48a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d48a4:	4803      	ldr	r0, [pc, #12]	; (d48b4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d48a6:	4a04      	ldr	r2, [pc, #16]	; (d48b8 <_GLOBAL__sub_I_RGB+0x14>)
   d48a8:	4904      	ldr	r1, [pc, #16]	; (d48bc <_GLOBAL__sub_I_RGB+0x18>)
   d48aa:	2300      	movs	r3, #0
   d48ac:	6083      	str	r3, [r0, #8]
   d48ae:	f000 bc67 	b.w	d5180 <__aeabi_atexit>
   d48b2:	bf00      	nop
   d48b4:	2003e3fc 	.word	0x2003e3fc
   d48b8:	2003e3b0 	.word	0x2003e3b0
   d48bc:	000d4899 	.word	0x000d4899

000d48c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d48c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d48c2:	4b0c      	ldr	r3, [pc, #48]	; (d48f4 <serialEventRun+0x34>)
   d48c4:	b133      	cbz	r3, d48d4 <serialEventRun+0x14>
   d48c6:	f000 f957 	bl	d4b78 <_Z16_fetch_usbserialv>
   d48ca:	6803      	ldr	r3, [r0, #0]
   d48cc:	691b      	ldr	r3, [r3, #16]
   d48ce:	4798      	blx	r3
   d48d0:	2800      	cmp	r0, #0
   d48d2:	dc09      	bgt.n	d48e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d48d4:	4b08      	ldr	r3, [pc, #32]	; (d48f8 <serialEventRun+0x38>)
   d48d6:	b163      	cbz	r3, d48f2 <serialEventRun+0x32>
   d48d8:	f000 f9cc 	bl	d4c74 <_Z22__fetch_global_Serial1v>
   d48dc:	6803      	ldr	r3, [r0, #0]
   d48de:	691b      	ldr	r3, [r3, #16]
   d48e0:	4798      	blx	r3
   d48e2:	2800      	cmp	r0, #0
   d48e4:	dc03      	bgt.n	d48ee <serialEventRun+0x2e>
   d48e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d48e8:	f3af 8000 	nop.w
   d48ec:	e7f2      	b.n	d48d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d48ee:	f3af 8000 	nop.w
   d48f2:	bd08      	pop	{r3, pc}
	...

000d48fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d48fc:	b508      	push	{r3, lr}
	serialEventRun();
   d48fe:	f7ff ffdf 	bl	d48c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4902:	f7ff fd3f 	bl	d4384 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4906:	4b01      	ldr	r3, [pc, #4]	; (d490c <_post_loop+0x10>)
   d4908:	6018      	str	r0, [r3, #0]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	2003e730 	.word	0x2003e730

000d4910 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4910:	4802      	ldr	r0, [pc, #8]	; (d491c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4912:	4a03      	ldr	r2, [pc, #12]	; (d4920 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4914:	4903      	ldr	r1, [pc, #12]	; (d4924 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4916:	1a12      	subs	r2, r2, r0
   d4918:	f000 bdaa 	b.w	d5470 <memcpy>
   d491c:	2003f400 	.word	0x2003f400
   d4920:	2003f404 	.word	0x2003f404
   d4924:	000d5a80 	.word	0x000d5a80

000d4928 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4928:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d492a:	2300      	movs	r3, #0
   d492c:	9300      	str	r3, [sp, #0]
   d492e:	461a      	mov	r2, r3
   d4930:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4934:	f7ff fe38 	bl	d45a8 <system_ctrl_set_result>
}
   d4938:	b003      	add	sp, #12
   d493a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4940 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4940:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4942:	8843      	ldrh	r3, [r0, #2]
   d4944:	2b0a      	cmp	r3, #10
   d4946:	d008      	beq.n	d495a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4948:	2b50      	cmp	r3, #80	; 0x50
   d494a:	d109      	bne.n	d4960 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d494c:	4b09      	ldr	r3, [pc, #36]	; (d4974 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d494e:	681b      	ldr	r3, [r3, #0]
   d4950:	b13b      	cbz	r3, d4962 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4952:	b003      	add	sp, #12
   d4954:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4958:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d495a:	f7ff ffe5 	bl	d4928 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d495e:	e006      	b.n	d496e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4960:	2300      	movs	r3, #0
   d4962:	9300      	str	r3, [sp, #0]
   d4964:	461a      	mov	r2, r3
   d4966:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d496a:	f7ff fe1d 	bl	d45a8 <system_ctrl_set_result>
        break;
    }
}
   d496e:	b003      	add	sp, #12
   d4970:	f85d fb04 	ldr.w	pc, [sp], #4
   d4974:	2003e40c 	.word	0x2003e40c

000d4978 <module_user_init_hook>:

void module_user_init_hook()
{
   d4978:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d497a:	4c10      	ldr	r4, [pc, #64]	; (d49bc <module_user_init_hook+0x44>)
   d497c:	4d10      	ldr	r5, [pc, #64]	; (d49c0 <module_user_init_hook+0x48>)
   d497e:	6823      	ldr	r3, [r4, #0]
   d4980:	42ab      	cmp	r3, r5
   d4982:	4b10      	ldr	r3, [pc, #64]	; (d49c4 <module_user_init_hook+0x4c>)
   d4984:	bf0c      	ite	eq
   d4986:	2201      	moveq	r2, #1
   d4988:	2200      	movne	r2, #0
   d498a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d498c:	d002      	beq.n	d4994 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d498e:	f7ff ffbf 	bl	d4910 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4992:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4994:	f7ff fcee 	bl	d4374 <HAL_RNG_GetRandomNumber>
   d4998:	4604      	mov	r4, r0
    srand(seed);
   d499a:	f000 fd7d 	bl	d5498 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d499e:	4b0a      	ldr	r3, [pc, #40]	; (d49c8 <module_user_init_hook+0x50>)
   d49a0:	b113      	cbz	r3, d49a8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d49a2:	4620      	mov	r0, r4
   d49a4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d49a8:	2100      	movs	r1, #0
   d49aa:	4807      	ldr	r0, [pc, #28]	; (d49c8 <module_user_init_hook+0x50>)
   d49ac:	f7ff fe56 	bl	d465c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49b0:	2100      	movs	r1, #0
   d49b2:	4806      	ldr	r0, [pc, #24]	; (d49cc <module_user_init_hook+0x54>)
}
   d49b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49b8:	f7ff bdec 	b.w	d4594 <system_ctrl_set_app_request_handler>
   d49bc:	2003f400 	.word	0x2003f400
   d49c0:	9a271c1e 	.word	0x9a271c1e
   d49c4:	2003e410 	.word	0x2003e410
   d49c8:	00000000 	.word	0x00000000
   d49cc:	000d4941 	.word	0x000d4941

000d49d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d49d0:	4770      	bx	lr

000d49d2 <_ZN9IPAddressD0Ev>:
   d49d2:	b510      	push	{r4, lr}
   d49d4:	2118      	movs	r1, #24
   d49d6:	4604      	mov	r4, r0
   d49d8:	f000 fbe0 	bl	d519c <_ZdlPvj>
   d49dc:	4620      	mov	r0, r4
   d49de:	bd10      	pop	{r4, pc}

000d49e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d49e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d49e2:	7d03      	ldrb	r3, [r0, #20]
   d49e4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d49e6:	b08d      	sub	sp, #52	; 0x34
   d49e8:	460e      	mov	r6, r1
   d49ea:	f100 0704 	add.w	r7, r0, #4
   d49ee:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d49f2:	d002      	beq.n	d49fa <_ZNK9IPAddress7printToER5Print+0x1a>
   d49f4:	f100 0508 	add.w	r5, r0, #8
   d49f8:	e018      	b.n	d4a2c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d49fa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d49fc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d49fe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a02:	232f      	movs	r3, #47	; 0x2f
   d4a04:	462a      	mov	r2, r5
   d4a06:	200a      	movs	r0, #10
   d4a08:	f7ff fcec 	bl	d43e4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a0c:	4628      	mov	r0, r5
   d4a0e:	f000 fd6b 	bl	d54e8 <strlen>
   d4a12:	6833      	ldr	r3, [r6, #0]
   d4a14:	4602      	mov	r2, r0
   d4a16:	68db      	ldr	r3, [r3, #12]
   d4a18:	4629      	mov	r1, r5
   d4a1a:	4630      	mov	r0, r6
   d4a1c:	4798      	blx	r3
   d4a1e:	e00f      	b.n	d4a40 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a20:	b124      	cbz	r4, d4a2c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a22:	212e      	movs	r1, #46	; 0x2e
   d4a24:	4630      	mov	r0, r6
   d4a26:	f7ff fedf 	bl	d47e8 <_ZN5Print5printEc>
   d4a2a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a30:	220a      	movs	r2, #10
   d4a32:	4630      	mov	r0, r6
   d4a34:	f7ff fef1 	bl	d481a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a38:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a3a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a3c:	d1f0      	bne.n	d4a20 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a3e:	4620      	mov	r0, r4
    }
    return n;
}
   d4a40:	b00d      	add	sp, #52	; 0x34
   d4a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a44 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4a44:	b510      	push	{r4, lr}
   d4a46:	4b05      	ldr	r3, [pc, #20]	; (d4a5c <_ZN9IPAddressC1Ev+0x18>)
   d4a48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4a4a:	2211      	movs	r2, #17
   d4a4c:	f840 3b04 	str.w	r3, [r0], #4
   d4a50:	2100      	movs	r1, #0
   d4a52:	f000 fd18 	bl	d5486 <memset>
{
    clear();
}
   d4a56:	4620      	mov	r0, r4
   d4a58:	bd10      	pop	{r4, pc}
   d4a5a:	bf00      	nop
   d4a5c:	000d589c 	.word	0x000d589c

000d4a60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4a60:	4603      	mov	r3, r0
   d4a62:	4a07      	ldr	r2, [pc, #28]	; (d4a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4a64:	b510      	push	{r4, lr}
   d4a66:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4a6a:	f101 0210 	add.w	r2, r1, #16
   d4a6e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4a72:	f843 4b04 	str.w	r4, [r3], #4
   d4a76:	4291      	cmp	r1, r2
   d4a78:	d1f9      	bne.n	d4a6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4a7a:	780a      	ldrb	r2, [r1, #0]
   d4a7c:	701a      	strb	r2, [r3, #0]
}
   d4a7e:	bd10      	pop	{r4, pc}
   d4a80:	000d589c 	.word	0x000d589c

000d4a84 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4a84:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4a86:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4a8a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4a8e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4a92:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4a96:	2304      	movs	r3, #4
   d4a98:	6041      	str	r1, [r0, #4]
   d4a9a:	7503      	strb	r3, [r0, #20]
   d4a9c:	bd10      	pop	{r4, pc}

000d4a9e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4a9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4aa0:	780d      	ldrb	r5, [r1, #0]
   d4aa2:	788b      	ldrb	r3, [r1, #2]
   d4aa4:	784a      	ldrb	r2, [r1, #1]
   d4aa6:	78c9      	ldrb	r1, [r1, #3]
   d4aa8:	9100      	str	r1, [sp, #0]
   d4aaa:	4629      	mov	r1, r5
   d4aac:	f7ff ffea 	bl	d4a84 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4ab0:	b003      	add	sp, #12
   d4ab2:	bd30      	pop	{r4, r5, pc}

000d4ab4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ab4:	7441      	strb	r1, [r0, #17]
   d4ab6:	4770      	bx	lr

000d4ab8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ab8:	4770      	bx	lr

000d4aba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4aba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4abc:	2100      	movs	r1, #0
   d4abe:	7c00      	ldrb	r0, [r0, #16]
   d4ac0:	f7ff fd40 	bl	d4544 <HAL_USB_USART_Receive_Data>
}
   d4ac4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ac8:	bf28      	it	cs
   d4aca:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ace:	bd08      	pop	{r3, pc}

000d4ad0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4ad0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4ad2:	2101      	movs	r1, #1
   d4ad4:	7c00      	ldrb	r0, [r0, #16]
   d4ad6:	f7ff fd35 	bl	d4544 <HAL_USB_USART_Receive_Data>
}
   d4ada:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ade:	bf28      	it	cs
   d4ae0:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ae4:	bd08      	pop	{r3, pc}

000d4ae6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4ae6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4ae8:	7c00      	ldrb	r0, [r0, #16]
   d4aea:	f7ff fd23 	bl	d4534 <HAL_USB_USART_Available_Data_For_Write>
}
   d4aee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4af2:	bd08      	pop	{r3, pc}

000d4af4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4af4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4af6:	7c00      	ldrb	r0, [r0, #16]
   d4af8:	f7ff fd14 	bl	d4524 <HAL_USB_USART_Available_Data>
}
   d4afc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b00:	bd08      	pop	{r3, pc}

000d4b02 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b02:	7c00      	ldrb	r0, [r0, #16]
   d4b04:	f7ff bd2e 	b.w	d4564 <HAL_USB_USART_Flush_Data>

000d4b08 <_ZN9USBSerialD0Ev>:
   d4b08:	b510      	push	{r4, lr}
   d4b0a:	2114      	movs	r1, #20
   d4b0c:	4604      	mov	r4, r0
   d4b0e:	f000 fb45 	bl	d519c <_ZdlPvj>
   d4b12:	4620      	mov	r0, r4
   d4b14:	bd10      	pop	{r4, pc}

000d4b16 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b16:	b538      	push	{r3, r4, r5, lr}
   d4b18:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b1a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b1c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b1e:	f7ff fd09 	bl	d4534 <HAL_USB_USART_Available_Data_For_Write>
   d4b22:	2800      	cmp	r0, #0
   d4b24:	dc01      	bgt.n	d4b2a <_ZN9USBSerial5writeEh+0x14>
   d4b26:	7c60      	ldrb	r0, [r4, #17]
   d4b28:	b128      	cbz	r0, d4b36 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4b2a:	4629      	mov	r1, r5
   d4b2c:	7c20      	ldrb	r0, [r4, #16]
   d4b2e:	f7ff fd11 	bl	d4554 <HAL_USB_USART_Send_Data>
   d4b32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4b36:	bd38      	pop	{r3, r4, r5, pc}

000d4b38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b38:	b510      	push	{r4, lr}
   d4b3a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4b3c:	2300      	movs	r3, #0
   d4b3e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b44:	60a3      	str	r3, [r4, #8]
   d4b46:	4b05      	ldr	r3, [pc, #20]	; (d4b5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4b48:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4b4a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b4c:	4608      	mov	r0, r1
{
  _serial = serial;
   d4b4e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4b50:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4b52:	4611      	mov	r1, r2
   d4b54:	f7ff fcd6 	bl	d4504 <HAL_USB_USART_Init>
}
   d4b58:	4620      	mov	r0, r4
   d4b5a:	bd10      	pop	{r4, pc}
   d4b5c:	000d58b0 	.word	0x000d58b0

000d4b60 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4b60:	2200      	movs	r2, #0
   d4b62:	7c00      	ldrb	r0, [r0, #16]
   d4b64:	f7ff bcd6 	b.w	d4514 <HAL_USB_USART_Begin>

000d4b68 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4b68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4b6a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4b6c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4b6e:	2100      	movs	r1, #0
   d4b70:	f000 fc89 	bl	d5486 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4b74:	4620      	mov	r0, r4
   d4b76:	bd10      	pop	{r4, pc}

000d4b78 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4b78:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4b7a:	4d0e      	ldr	r5, [pc, #56]	; (d4bb4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4b7c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4b7e:	a801      	add	r0, sp, #4
   d4b80:	f7ff fff2 	bl	d4b68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4b84:	6829      	ldr	r1, [r5, #0]
   d4b86:	f011 0401 	ands.w	r4, r1, #1
   d4b8a:	d110      	bne.n	d4bae <_Z16_fetch_usbserialv+0x36>
   d4b8c:	4628      	mov	r0, r5
   d4b8e:	f7ff fa86 	bl	d409e <__cxa_guard_acquire>
   d4b92:	b160      	cbz	r0, d4bae <_Z16_fetch_usbserialv+0x36>
   d4b94:	aa01      	add	r2, sp, #4
   d4b96:	4621      	mov	r1, r4
   d4b98:	4807      	ldr	r0, [pc, #28]	; (d4bb8 <_Z16_fetch_usbserialv+0x40>)
   d4b9a:	f7ff ffcd 	bl	d4b38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4b9e:	4628      	mov	r0, r5
   d4ba0:	f7ff fa82 	bl	d40a8 <__cxa_guard_release>
   d4ba4:	4a05      	ldr	r2, [pc, #20]	; (d4bbc <_Z16_fetch_usbserialv+0x44>)
   d4ba6:	4906      	ldr	r1, [pc, #24]	; (d4bc0 <_Z16_fetch_usbserialv+0x48>)
   d4ba8:	4803      	ldr	r0, [pc, #12]	; (d4bb8 <_Z16_fetch_usbserialv+0x40>)
   d4baa:	f000 fae9 	bl	d5180 <__aeabi_atexit>
	return _usbserial;
}
   d4bae:	4802      	ldr	r0, [pc, #8]	; (d4bb8 <_Z16_fetch_usbserialv+0x40>)
   d4bb0:	b007      	add	sp, #28
   d4bb2:	bd30      	pop	{r4, r5, pc}
   d4bb4:	2003e414 	.word	0x2003e414
   d4bb8:	2003e418 	.word	0x2003e418
   d4bbc:	2003e3b0 	.word	0x2003e3b0
   d4bc0:	000d4ab9 	.word	0x000d4ab9

000d4bc4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4bc4:	4770      	bx	lr

000d4bc6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4bc6:	7441      	strb	r1, [r0, #17]
   d4bc8:	4770      	bx	lr

000d4bca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4bca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4bcc:	7c00      	ldrb	r0, [r0, #16]
   d4bce:	f7ff fc41 	bl	d4454 <HAL_USART_Available_Data_For_Write>
}
   d4bd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4bd6:	bd08      	pop	{r3, pc}

000d4bd8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4bd8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4bda:	7c00      	ldrb	r0, [r0, #16]
   d4bdc:	f7ff fc1a 	bl	d4414 <HAL_USART_Available_Data>
}
   d4be0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4be4:	bd08      	pop	{r3, pc}

000d4be6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4be6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4be8:	7c00      	ldrb	r0, [r0, #16]
   d4bea:	f7ff fc23 	bl	d4434 <HAL_USART_Peek_Data>
}
   d4bee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4bf2:	bf28      	it	cs
   d4bf4:	f04f 30ff 	movcs.w	r0, #4294967295
   d4bf8:	bd08      	pop	{r3, pc}

000d4bfa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4bfa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4bfc:	7c00      	ldrb	r0, [r0, #16]
   d4bfe:	f7ff fc11 	bl	d4424 <HAL_USART_Read_Data>
}
   d4c02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c06:	bf28      	it	cs
   d4c08:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c0c:	bd08      	pop	{r3, pc}

000d4c0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4c0e:	7c00      	ldrb	r0, [r0, #16]
   d4c10:	f7ff bc18 	b.w	d4444 <HAL_USART_Flush_Data>

000d4c14 <_ZN11USARTSerialD0Ev>:
   d4c14:	b510      	push	{r4, lr}
   d4c16:	2114      	movs	r1, #20
   d4c18:	4604      	mov	r4, r0
   d4c1a:	f000 fabf 	bl	d519c <_ZdlPvj>
   d4c1e:	4620      	mov	r0, r4
   d4c20:	bd10      	pop	{r4, pc}

000d4c22 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4c22:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c24:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4c26:	4604      	mov	r4, r0
   d4c28:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c2a:	b925      	cbnz	r5, d4c36 <_ZN11USARTSerial5writeEh+0x14>
   d4c2c:	7c00      	ldrb	r0, [r0, #16]
   d4c2e:	f7ff fc11 	bl	d4454 <HAL_USART_Available_Data_For_Write>
   d4c32:	2800      	cmp	r0, #0
   d4c34:	dd05      	ble.n	d4c42 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c36:	4631      	mov	r1, r6
   d4c38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c3e:	f7ff bbe1 	b.w	d4404 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4c42:	4628      	mov	r0, r5
   d4c44:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4c48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4c48:	b510      	push	{r4, lr}
   d4c4a:	4604      	mov	r4, r0
   d4c4c:	4608      	mov	r0, r1
   d4c4e:	4611      	mov	r1, r2
   d4c50:	2200      	movs	r2, #0
   d4c52:	6062      	str	r2, [r4, #4]
   d4c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c58:	60a2      	str	r2, [r4, #8]
   d4c5a:	4a05      	ldr	r2, [pc, #20]	; (d4c70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4c5c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4c5e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4c60:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4c62:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4c64:	461a      	mov	r2, r3
   d4c66:	f7ff fbc5 	bl	d43f4 <HAL_USART_Init>
}
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	bd10      	pop	{r4, pc}
   d4c6e:	bf00      	nop
   d4c70:	000d58e0 	.word	0x000d58e0

000d4c74 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4c74:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4c76:	4d0c      	ldr	r5, [pc, #48]	; (d4ca8 <_Z22__fetch_global_Serial1v+0x34>)
   d4c78:	6829      	ldr	r1, [r5, #0]
   d4c7a:	f011 0401 	ands.w	r4, r1, #1
   d4c7e:	d111      	bne.n	d4ca4 <_Z22__fetch_global_Serial1v+0x30>
   d4c80:	4628      	mov	r0, r5
   d4c82:	f7ff fa0c 	bl	d409e <__cxa_guard_acquire>
   d4c86:	b168      	cbz	r0, d4ca4 <_Z22__fetch_global_Serial1v+0x30>
   d4c88:	4a08      	ldr	r2, [pc, #32]	; (d4cac <_Z22__fetch_global_Serial1v+0x38>)
   d4c8a:	4b09      	ldr	r3, [pc, #36]	; (d4cb0 <_Z22__fetch_global_Serial1v+0x3c>)
   d4c8c:	4809      	ldr	r0, [pc, #36]	; (d4cb4 <_Z22__fetch_global_Serial1v+0x40>)
   d4c8e:	4621      	mov	r1, r4
   d4c90:	f7ff ffda 	bl	d4c48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4c94:	4628      	mov	r0, r5
   d4c96:	f7ff fa07 	bl	d40a8 <__cxa_guard_release>
   d4c9a:	4a07      	ldr	r2, [pc, #28]	; (d4cb8 <_Z22__fetch_global_Serial1v+0x44>)
   d4c9c:	4907      	ldr	r1, [pc, #28]	; (d4cbc <_Z22__fetch_global_Serial1v+0x48>)
   d4c9e:	4805      	ldr	r0, [pc, #20]	; (d4cb4 <_Z22__fetch_global_Serial1v+0x40>)
   d4ca0:	f000 fa6e 	bl	d5180 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4ca4:	4803      	ldr	r0, [pc, #12]	; (d4cb4 <_Z22__fetch_global_Serial1v+0x40>)
   d4ca6:	bd38      	pop	{r3, r4, r5, pc}
   d4ca8:	2003e4c4 	.word	0x2003e4c4
   d4cac:	2003e4c8 	.word	0x2003e4c8
   d4cb0:	2003e440 	.word	0x2003e440
   d4cb4:	2003e42c 	.word	0x2003e42c
   d4cb8:	2003e3b0 	.word	0x2003e3b0
   d4cbc:	000d4bc5 	.word	0x000d4bc5

000d4cc0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4cc0:	4770      	bx	lr

000d4cc2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cc4:	4606      	mov	r6, r0
   d4cc6:	4615      	mov	r5, r2
   d4cc8:	460c      	mov	r4, r1
   d4cca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ccc:	42bc      	cmp	r4, r7
   d4cce:	d006      	beq.n	d4cde <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4cd0:	6833      	ldr	r3, [r6, #0]
   d4cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4cd6:	689b      	ldr	r3, [r3, #8]
   d4cd8:	4630      	mov	r0, r6
   d4cda:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4cdc:	e7f6      	b.n	d4ccc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4cde:	4628      	mov	r0, r5
   d4ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ce2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4ce2:	2200      	movs	r2, #0
   d4ce4:	7c00      	ldrb	r0, [r0, #16]
   d4ce6:	f7ff bbd5 	b.w	d4494 <HAL_I2C_Write_Data>

000d4cea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4cea:	2100      	movs	r1, #0
   d4cec:	7c00      	ldrb	r0, [r0, #16]
   d4cee:	f7ff bbd9 	b.w	d44a4 <HAL_I2C_Available_Data>

000d4cf2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4cf2:	2100      	movs	r1, #0
   d4cf4:	7c00      	ldrb	r0, [r0, #16]
   d4cf6:	f7ff bbdd 	b.w	d44b4 <HAL_I2C_Read_Data>

000d4cfa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4cfa:	2100      	movs	r1, #0
   d4cfc:	7c00      	ldrb	r0, [r0, #16]
   d4cfe:	f7ff bbe1 	b.w	d44c4 <HAL_I2C_Peek_Data>

000d4d02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4d02:	2100      	movs	r1, #0
   d4d04:	7c00      	ldrb	r0, [r0, #16]
   d4d06:	f7ff bbe5 	b.w	d44d4 <HAL_I2C_Flush_Data>

000d4d0a <_ZN7TwoWireD0Ev>:
   d4d0a:	b510      	push	{r4, lr}
   d4d0c:	2114      	movs	r1, #20
   d4d0e:	4604      	mov	r4, r0
   d4d10:	f000 fa44 	bl	d519c <_ZdlPvj>
   d4d14:	4620      	mov	r0, r4
   d4d16:	bd10      	pop	{r4, pc}

000d4d18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d18:	b510      	push	{r4, lr}
   d4d1a:	4604      	mov	r4, r0
   d4d1c:	2300      	movs	r3, #0
   d4d1e:	6063      	str	r3, [r4, #4]
   d4d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d24:	60a3      	str	r3, [r4, #8]
   d4d26:	4b04      	ldr	r3, [pc, #16]	; (d4d38 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4d28:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d2a:	4608      	mov	r0, r1
   d4d2c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4d2e:	4611      	mov	r1, r2
   d4d30:	f7ff fbd8 	bl	d44e4 <HAL_I2C_Init>
}
   d4d34:	4620      	mov	r0, r4
   d4d36:	bd10      	pop	{r4, pc}
   d4d38:	000d5910 	.word	0x000d5910

000d4d3c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4d3c:	2300      	movs	r3, #0
   d4d3e:	461a      	mov	r2, r3
   d4d40:	4619      	mov	r1, r3
   d4d42:	7c00      	ldrb	r0, [r0, #16]
   d4d44:	f7ff bb8e 	b.w	d4464 <HAL_I2C_Begin>

000d4d48 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4d48:	b570      	push	{r4, r5, r6, lr}
   d4d4a:	460c      	mov	r4, r1
   d4d4c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4d4e:	2514      	movs	r5, #20
   d4d50:	4606      	mov	r6, r0
   d4d52:	462a      	mov	r2, r5
   d4d54:	2100      	movs	r1, #0
   d4d56:	a801      	add	r0, sp, #4
   d4d58:	f000 fb95 	bl	d5486 <memset>
   d4d5c:	7823      	ldrb	r3, [r4, #0]
   d4d5e:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d62:	6863      	ldr	r3, [r4, #4]
   d4d64:	9303      	str	r3, [sp, #12]
   d4d66:	68e3      	ldr	r3, [r4, #12]
   d4d68:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4d6a:	2200      	movs	r2, #0
   d4d6c:	7a23      	ldrb	r3, [r4, #8]
   d4d6e:	7c30      	ldrb	r0, [r6, #16]
   d4d70:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4d74:	a901      	add	r1, sp, #4
   d4d76:	9305      	str	r3, [sp, #20]
   d4d78:	f7ff fbbc 	bl	d44f4 <HAL_I2C_Request_Data_Ex>
}
   d4d7c:	b006      	add	sp, #24
   d4d7e:	bd70      	pop	{r4, r5, r6, pc}

000d4d80 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4d82:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4d84:	f88d 1000 	strb.w	r1, [sp]
   d4d88:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4d8c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4d8e:	bf18      	it	ne
   d4d90:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4d92:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4d94:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4d96:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d9a:	f7ff ffd5 	bl	d4d48 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4d9e:	b005      	add	sp, #20
   d4da0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4da4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4da4:	2301      	movs	r3, #1
   d4da6:	f7ff bfeb 	b.w	d4d80 <_ZN7TwoWire11requestFromEhjh>

000d4daa <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4daa:	2200      	movs	r2, #0
   d4dac:	7c00      	ldrb	r0, [r0, #16]
   d4dae:	f7ff bb61 	b.w	d4474 <HAL_I2C_Begin_Transmission>

000d4db2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4db2:	2200      	movs	r2, #0
   d4db4:	7c00      	ldrb	r0, [r0, #16]
   d4db6:	f7ff bb65 	b.w	d4484 <HAL_I2C_End_Transmission>

000d4dba <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4dba:	2101      	movs	r1, #1
   d4dbc:	f7ff bff9 	b.w	d4db2 <_ZN7TwoWire15endTransmissionEh>

000d4dc0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4dc0:	2200      	movs	r2, #0
   d4dc2:	4611      	mov	r1, r2
   d4dc4:	6840      	ldr	r0, [r0, #4]
   d4dc6:	f7ff bc31 	b.w	d462c <network_listening>

000d4dca <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4dca:	2200      	movs	r2, #0
   d4dcc:	4611      	mov	r1, r2
   d4dce:	6840      	ldr	r0, [r0, #4]
   d4dd0:	f7ff bc3c 	b.w	d464c <network_get_listen_timeout>

000d4dd4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	6840      	ldr	r0, [r0, #4]
   d4dd8:	f7ff bc30 	b.w	d463c <network_set_listen_timeout>

000d4ddc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ddc:	2200      	movs	r2, #0
   d4dde:	f081 0101 	eor.w	r1, r1, #1
   d4de2:	6840      	ldr	r0, [r0, #4]
   d4de4:	f7ff bc1a 	b.w	d461c <network_listen>

000d4de8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4de8:	2300      	movs	r3, #0
   d4dea:	461a      	mov	r2, r3
   d4dec:	2101      	movs	r1, #1
   d4dee:	6840      	ldr	r0, [r0, #4]
   d4df0:	f7ff bc0c 	b.w	d460c <network_off>

000d4df4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4df4:	2300      	movs	r3, #0
   d4df6:	461a      	mov	r2, r3
   d4df8:	4619      	mov	r1, r3
   d4dfa:	6840      	ldr	r0, [r0, #4]
   d4dfc:	f7ff bbfe 	b.w	d45fc <network_on>

000d4e00 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e00:	2200      	movs	r2, #0
   d4e02:	4611      	mov	r1, r2
   d4e04:	6840      	ldr	r0, [r0, #4]
   d4e06:	f7ff bbf1 	b.w	d45ec <network_ready>

000d4e0a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e0a:	2200      	movs	r2, #0
   d4e0c:	4611      	mov	r1, r2
   d4e0e:	6840      	ldr	r0, [r0, #4]
   d4e10:	f7ff bbdc 	b.w	d45cc <network_connecting>

000d4e14 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e14:	2200      	movs	r2, #0
   d4e16:	2102      	movs	r1, #2
   d4e18:	6840      	ldr	r0, [r0, #4]
   d4e1a:	f7ff bbdf 	b.w	d45dc <network_disconnect>

000d4e1e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e1e:	2300      	movs	r3, #0
   d4e20:	461a      	mov	r2, r3
   d4e22:	6840      	ldr	r0, [r0, #4]
   d4e24:	f7ff bbca 	b.w	d45bc <network_connect>

000d4e28 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4e28:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e2a:	4605      	mov	r5, r0
   d4e2c:	b188      	cbz	r0, d4e52 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e2e:	6804      	ldr	r4, [r0, #0]
   d4e30:	b14c      	cbz	r4, d4e46 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4e32:	68a3      	ldr	r3, [r4, #8]
   d4e34:	b11b      	cbz	r3, d4e3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e36:	2203      	movs	r2, #3
   d4e38:	4621      	mov	r1, r4
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e3e:	2110      	movs	r1, #16
   d4e40:	4620      	mov	r0, r4
   d4e42:	f000 f9ab 	bl	d519c <_ZdlPvj>
   d4e46:	4628      	mov	r0, r5
   d4e48:	2114      	movs	r1, #20
      }
   d4e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e4e:	f000 b9a5 	b.w	d519c <_ZdlPvj>
   d4e52:	bd38      	pop	{r3, r4, r5, pc}

000d4e54 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4e54:	b110      	cbz	r0, d4e5c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4e56:	6803      	ldr	r3, [r0, #0]
   d4e58:	685b      	ldr	r3, [r3, #4]
   d4e5a:	4718      	bx	r3
   d4e5c:	4770      	bx	lr

000d4e5e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4e5e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4e60:	6803      	ldr	r3, [r0, #0]
   d4e62:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4e64:	b1bb      	cbz	r3, d4e96 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4e66:	6858      	ldr	r0, [r3, #4]
   d4e68:	f7ff fa94 	bl	d4394 <os_thread_is_current>
   d4e6c:	b978      	cbnz	r0, d4e8e <_ZN6ThreadD1Ev+0x30>
   d4e6e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4e70:	7c5a      	ldrb	r2, [r3, #17]
   d4e72:	b912      	cbnz	r2, d4e7a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4e74:	6858      	ldr	r0, [r3, #4]
   d4e76:	f7ff fa95 	bl	d43a4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4e7a:	6823      	ldr	r3, [r4, #0]
   d4e7c:	6858      	ldr	r0, [r3, #4]
   d4e7e:	f7ff fa99 	bl	d43b4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e82:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4e84:	2300      	movs	r3, #0
   d4e86:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4e88:	b128      	cbz	r0, d4e96 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4e8a:	f7ff ffcd 	bl	d4e28 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e8e:	6820      	ldr	r0, [r4, #0]
   d4e90:	b108      	cbz	r0, d4e96 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4e92:	f7ff ffc9 	bl	d4e28 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4e96:	4620      	mov	r0, r4
   d4e98:	bd10      	pop	{r4, pc}

000d4e9a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4e9a:	b538      	push	{r3, r4, r5, lr}
   d4e9c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e9e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4ea2:	b108      	cbz	r0, d4ea8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4ea4:	f7ff f8f9 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ea8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4eac:	b108      	cbz	r0, d4eb2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4eae:	f7ff fa91 	bl	d43d4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4eb2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4eb6:	b135      	cbz	r5, d4ec6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eb8:	4628      	mov	r0, r5
   d4eba:	f7ff ffd0 	bl	d4e5e <_ZN6ThreadD1Ev>
   d4ebe:	2104      	movs	r1, #4
   d4ec0:	4628      	mov	r0, r5
   d4ec2:	f000 f96b 	bl	d519c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ec6:	6820      	ldr	r0, [r4, #0]
   d4ec8:	b108      	cbz	r0, d4ece <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4eca:	f7ff ffc3 	bl	d4e54 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4ece:	4620      	mov	r0, r4
   d4ed0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4ed4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4ed4:	b510      	push	{r4, lr}
   d4ed6:	4b04      	ldr	r3, [pc, #16]	; (d4ee8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4ed8:	4604      	mov	r4, r0
   d4eda:	f840 3b08 	str.w	r3, [r0], #8
   d4ede:	f7ff ffdc 	bl	d4e9a <_ZN5spark11MeshPublishD1Ev>
   d4ee2:	4620      	mov	r0, r4
   d4ee4:	bd10      	pop	{r4, pc}
   d4ee6:	bf00      	nop
   d4ee8:	000d5938 	.word	0x000d5938

000d4eec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4eec:	b538      	push	{r3, r4, r5, lr}
   d4eee:	4c0e      	ldr	r4, [pc, #56]	; (d4f28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4ef0:	4b0e      	ldr	r3, [pc, #56]	; (d4f2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4ef2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4ef4:	2500      	movs	r5, #0
   d4ef6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4ef8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4efc:	6063      	str	r3, [r4, #4]
   d4efe:	60a5      	str	r5, [r4, #8]
   d4f00:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f04:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f08:	f7ff fa5c 	bl	d43c4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f0c:	4b08      	ldr	r3, [pc, #32]	; (d4f30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f0e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f12:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f16:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f18:	4620      	mov	r0, r4
   d4f1a:	4a06      	ldr	r2, [pc, #24]	; (d4f34 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4f1c:	4906      	ldr	r1, [pc, #24]	; (d4f38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4f22:	f000 b92d 	b.w	d5180 <__aeabi_atexit>
   d4f26:	bf00      	nop
   d4f28:	2003e54c 	.word	0x2003e54c
   d4f2c:	000d59a0 	.word	0x000d59a0
   d4f30:	000d5938 	.word	0x000d5938
   d4f34:	2003e3b0 	.word	0x2003e3b0
   d4f38:	000d4ed5 	.word	0x000d4ed5

000d4f3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4f3c:	2200      	movs	r2, #0
   d4f3e:	4611      	mov	r1, r2
   d4f40:	6840      	ldr	r0, [r0, #4]
   d4f42:	f7ff bb53 	b.w	d45ec <network_ready>

000d4f46 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f46:	2200      	movs	r2, #0
   d4f48:	4611      	mov	r1, r2
   d4f4a:	6840      	ldr	r0, [r0, #4]
   d4f4c:	f7ff bb6e 	b.w	d462c <network_listening>

000d4f50 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f50:	2200      	movs	r2, #0
   d4f52:	4611      	mov	r1, r2
   d4f54:	6840      	ldr	r0, [r0, #4]
   d4f56:	f7ff bb79 	b.w	d464c <network_get_listen_timeout>

000d4f5a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	6840      	ldr	r0, [r0, #4]
   d4f5e:	f7ff bb6d 	b.w	d463c <network_set_listen_timeout>

000d4f62 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f62:	2200      	movs	r2, #0
   d4f64:	f081 0101 	eor.w	r1, r1, #1
   d4f68:	6840      	ldr	r0, [r0, #4]
   d4f6a:	f7ff bb57 	b.w	d461c <network_listen>

000d4f6e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4f6e:	2300      	movs	r3, #0
   d4f70:	461a      	mov	r2, r3
   d4f72:	4619      	mov	r1, r3
   d4f74:	6840      	ldr	r0, [r0, #4]
   d4f76:	f7ff bb49 	b.w	d460c <network_off>

000d4f7a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	461a      	mov	r2, r3
   d4f7e:	4619      	mov	r1, r3
   d4f80:	6840      	ldr	r0, [r0, #4]
   d4f82:	f7ff bb3b 	b.w	d45fc <network_on>

000d4f86 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f86:	2200      	movs	r2, #0
   d4f88:	4611      	mov	r1, r2
   d4f8a:	6840      	ldr	r0, [r0, #4]
   d4f8c:	f7ff bb1e 	b.w	d45cc <network_connecting>

000d4f90 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f90:	2200      	movs	r2, #0
   d4f92:	2102      	movs	r1, #2
   d4f94:	6840      	ldr	r0, [r0, #4]
   d4f96:	f7ff bb21 	b.w	d45dc <network_disconnect>

000d4f9a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f9a:	2300      	movs	r3, #0
   d4f9c:	461a      	mov	r2, r3
   d4f9e:	6840      	ldr	r0, [r0, #4]
   d4fa0:	f7ff bb0c 	b.w	d45bc <network_connect>

000d4fa4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4fa4:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4fa6:	2204      	movs	r2, #4
   d4fa8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4faa:	4a02      	ldr	r2, [pc, #8]	; (d4fb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4fac:	601a      	str	r2, [r3, #0]
   d4fae:	4770      	bx	lr
   d4fb0:	2003e720 	.word	0x2003e720
   d4fb4:	000d596c 	.word	0x000d596c

000d4fb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fb8:	2300      	movs	r3, #0
   d4fba:	461a      	mov	r2, r3
   d4fbc:	6840      	ldr	r0, [r0, #4]
   d4fbe:	f7ff bafd 	b.w	d45bc <network_connect>

000d4fc2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	2102      	movs	r1, #2
   d4fc6:	6840      	ldr	r0, [r0, #4]
   d4fc8:	f7ff bb08 	b.w	d45dc <network_disconnect>

000d4fcc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fcc:	2200      	movs	r2, #0
   d4fce:	4611      	mov	r1, r2
   d4fd0:	6840      	ldr	r0, [r0, #4]
   d4fd2:	f7ff bafb 	b.w	d45cc <network_connecting>

000d4fd6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fd6:	2200      	movs	r2, #0
   d4fd8:	4611      	mov	r1, r2
   d4fda:	6840      	ldr	r0, [r0, #4]
   d4fdc:	f7ff bb06 	b.w	d45ec <network_ready>

000d4fe0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fe0:	2300      	movs	r3, #0
   d4fe2:	461a      	mov	r2, r3
   d4fe4:	4619      	mov	r1, r3
   d4fe6:	6840      	ldr	r0, [r0, #4]
   d4fe8:	f7ff bb08 	b.w	d45fc <network_on>

000d4fec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fec:	2300      	movs	r3, #0
   d4fee:	461a      	mov	r2, r3
   d4ff0:	4619      	mov	r1, r3
   d4ff2:	6840      	ldr	r0, [r0, #4]
   d4ff4:	f7ff bb0a 	b.w	d460c <network_off>

000d4ff8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ff8:	2200      	movs	r2, #0
   d4ffa:	f081 0101 	eor.w	r1, r1, #1
   d4ffe:	6840      	ldr	r0, [r0, #4]
   d5000:	f7ff bb0c 	b.w	d461c <network_listen>

000d5004 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5004:	2200      	movs	r2, #0
   d5006:	6840      	ldr	r0, [r0, #4]
   d5008:	f7ff bb18 	b.w	d463c <network_set_listen_timeout>

000d500c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d500c:	2200      	movs	r2, #0
   d500e:	4611      	mov	r1, r2
   d5010:	6840      	ldr	r0, [r0, #4]
   d5012:	f7ff bb1b 	b.w	d464c <network_get_listen_timeout>

000d5016 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5016:	2200      	movs	r2, #0
   d5018:	4611      	mov	r1, r2
   d501a:	6840      	ldr	r0, [r0, #4]
   d501c:	f7ff bb06 	b.w	d462c <network_listening>

000d5020 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5024:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5026:	b095      	sub	sp, #84	; 0x54
   d5028:	4616      	mov	r6, r2
   d502a:	460d      	mov	r5, r1
   d502c:	4607      	mov	r7, r0
    IPAddress addr;
   d502e:	f7ff fd09 	bl	d4a44 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5032:	4621      	mov	r1, r4
   d5034:	2220      	movs	r2, #32
   d5036:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5038:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d503a:	f000 fa24 	bl	d5486 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d503e:	2340      	movs	r3, #64	; 0x40
   d5040:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5042:	4621      	mov	r1, r4
   d5044:	466b      	mov	r3, sp
   d5046:	aa0c      	add	r2, sp, #48	; 0x30
   d5048:	4630      	mov	r0, r6
   d504a:	f7ff f983 	bl	d4354 <netdb_getaddrinfo>
    if (!r) {
   d504e:	4604      	mov	r4, r0
   d5050:	2800      	cmp	r0, #0
   d5052:	d144      	bne.n	d50de <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5054:	4602      	mov	r2, r0
   d5056:	2101      	movs	r1, #1
   d5058:	6868      	ldr	r0, [r5, #4]
   d505a:	f7ff fac7 	bl	d45ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d505e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5060:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5062:	4622      	mov	r2, r4
   d5064:	6868      	ldr	r0, [r5, #4]
   d5066:	f7ff fac1 	bl	d45ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d506a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d506c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d506e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5070:	2e00      	cmp	r6, #0
   d5072:	d034      	beq.n	d50de <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5074:	2900      	cmp	r1, #0
   d5076:	d132      	bne.n	d50de <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5078:	6873      	ldr	r3, [r6, #4]
   d507a:	2b02      	cmp	r3, #2
   d507c:	d002      	beq.n	d5084 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d507e:	2b0a      	cmp	r3, #10
   d5080:	d009      	beq.n	d5096 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5082:	e02a      	b.n	d50da <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5084:	f1b8 0f00 	cmp.w	r8, #0
   d5088:	d027      	beq.n	d50da <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d508a:	6971      	ldr	r1, [r6, #20]
   d508c:	4638      	mov	r0, r7
   d508e:	3104      	adds	r1, #4
   d5090:	f7ff fd05 	bl	d4a9e <_ZN9IPAddressaSEPKh>
   d5094:	e020      	b.n	d50d8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5096:	f1b9 0f00 	cmp.w	r9, #0
   d509a:	d01e      	beq.n	d50da <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d509c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d509e:	2211      	movs	r2, #17
   d50a0:	a801      	add	r0, sp, #4
   d50a2:	f000 f9f0 	bl	d5486 <memset>
                    a.v = 6;
   d50a6:	2306      	movs	r3, #6
   d50a8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50ac:	ad01      	add	r5, sp, #4
   d50ae:	f104 0308 	add.w	r3, r4, #8
   d50b2:	3418      	adds	r4, #24
   d50b4:	6818      	ldr	r0, [r3, #0]
   d50b6:	6859      	ldr	r1, [r3, #4]
   d50b8:	462a      	mov	r2, r5
   d50ba:	c203      	stmia	r2!, {r0, r1}
   d50bc:	3308      	adds	r3, #8
   d50be:	42a3      	cmp	r3, r4
   d50c0:	4615      	mov	r5, r2
   d50c2:	d1f7      	bne.n	d50b4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50c4:	a901      	add	r1, sp, #4
   d50c6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50c8:	ad07      	add	r5, sp, #28
   d50ca:	f7ff fcc9 	bl	d4a60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50d0:	1d3c      	adds	r4, r7, #4
   d50d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50d4:	682b      	ldr	r3, [r5, #0]
   d50d6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d50d8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50da:	69f6      	ldr	r6, [r6, #28]
   d50dc:	e7c8      	b.n	d5070 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50de:	9800      	ldr	r0, [sp, #0]
   d50e0:	f7ff f930 	bl	d4344 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50e4:	4638      	mov	r0, r7
   d50e6:	b015      	add	sp, #84	; 0x54
   d50e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50ec:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50ee:	4a03      	ldr	r2, [pc, #12]	; (d50fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50f0:	601a      	str	r2, [r3, #0]
   d50f2:	2200      	movs	r2, #0
   d50f4:	605a      	str	r2, [r3, #4]
   d50f6:	4770      	bx	lr
   d50f8:	2003e728 	.word	0x2003e728
   d50fc:	000d59a0 	.word	0x000d59a0

000d5100 <_Z17acquireWireBufferv>:
   d5100:	b570      	push	{r4, r5, r6, lr}
   d5102:	4604      	mov	r4, r0
   d5104:	2514      	movs	r5, #20
   d5106:	462a      	mov	r2, r5
   d5108:	4e09      	ldr	r6, [pc, #36]	; (d5130 <_Z17acquireWireBufferv+0x30>)
   d510a:	2100      	movs	r1, #0
   d510c:	f000 f9bb 	bl	d5486 <memset>
   d5110:	8025      	strh	r5, [r4, #0]
   d5112:	2520      	movs	r5, #32
   d5114:	4631      	mov	r1, r6
   d5116:	60a5      	str	r5, [r4, #8]
   d5118:	6125      	str	r5, [r4, #16]
   d511a:	4628      	mov	r0, r5
   d511c:	f000 f840 	bl	d51a0 <_ZnajRKSt9nothrow_t>
   d5120:	4631      	mov	r1, r6
   d5122:	6060      	str	r0, [r4, #4]
   d5124:	4628      	mov	r0, r5
   d5126:	f000 f83b 	bl	d51a0 <_ZnajRKSt9nothrow_t>
   d512a:	60e0      	str	r0, [r4, #12]
   d512c:	4620      	mov	r0, r4
   d512e:	bd70      	pop	{r4, r5, r6, pc}
   d5130:	000d59cc 	.word	0x000d59cc

000d5134 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5134:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5136:	4d0e      	ldr	r5, [pc, #56]	; (d5170 <_Z19__fetch_global_Wirev+0x3c>)
   d5138:	6829      	ldr	r1, [r5, #0]
   d513a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d513e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5140:	d113      	bne.n	d516a <_Z19__fetch_global_Wirev+0x36>
   d5142:	4628      	mov	r0, r5
   d5144:	f7fe ffab 	bl	d409e <__cxa_guard_acquire>
   d5148:	b178      	cbz	r0, d516a <_Z19__fetch_global_Wirev+0x36>
   d514a:	a801      	add	r0, sp, #4
   d514c:	f7ff ffd8 	bl	d5100 <_Z17acquireWireBufferv>
   d5150:	aa01      	add	r2, sp, #4
   d5152:	4621      	mov	r1, r4
   d5154:	4807      	ldr	r0, [pc, #28]	; (d5174 <_Z19__fetch_global_Wirev+0x40>)
   d5156:	f7ff fddf 	bl	d4d18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d515a:	4628      	mov	r0, r5
   d515c:	f7fe ffa4 	bl	d40a8 <__cxa_guard_release>
   d5160:	4a05      	ldr	r2, [pc, #20]	; (d5178 <_Z19__fetch_global_Wirev+0x44>)
   d5162:	4906      	ldr	r1, [pc, #24]	; (d517c <_Z19__fetch_global_Wirev+0x48>)
   d5164:	4803      	ldr	r0, [pc, #12]	; (d5174 <_Z19__fetch_global_Wirev+0x40>)
   d5166:	f000 f80b 	bl	d5180 <__aeabi_atexit>
	return wire;
}
   d516a:	4802      	ldr	r0, [pc, #8]	; (d5174 <_Z19__fetch_global_Wirev+0x40>)
   d516c:	b007      	add	sp, #28
   d516e:	bd30      	pop	{r4, r5, pc}
   d5170:	2003e734 	.word	0x2003e734
   d5174:	2003e738 	.word	0x2003e738
   d5178:	2003e3b0 	.word	0x2003e3b0
   d517c:	000d4cc1 	.word	0x000d4cc1

000d5180 <__aeabi_atexit>:
   d5180:	460b      	mov	r3, r1
   d5182:	4601      	mov	r1, r0
   d5184:	4618      	mov	r0, r3
   d5186:	f000 b965 	b.w	d5454 <__cxa_atexit>
	...

000d518c <_ZSt15get_new_handlerv>:
   d518c:	4b02      	ldr	r3, [pc, #8]	; (d5198 <_ZSt15get_new_handlerv+0xc>)
   d518e:	6818      	ldr	r0, [r3, #0]
   d5190:	f3bf 8f5f 	dmb	sy
   d5194:	4770      	bx	lr
   d5196:	bf00      	nop
   d5198:	2003e74c 	.word	0x2003e74c

000d519c <_ZdlPvj>:
   d519c:	f7fe bf7b 	b.w	d4096 <_ZdlPv>

000d51a0 <_ZnajRKSt9nothrow_t>:
   d51a0:	f000 b800 	b.w	d51a4 <_ZnwjRKSt9nothrow_t>

000d51a4 <_ZnwjRKSt9nothrow_t>:
   d51a4:	b510      	push	{r4, lr}
   d51a6:	2800      	cmp	r0, #0
   d51a8:	bf14      	ite	ne
   d51aa:	4604      	movne	r4, r0
   d51ac:	2401      	moveq	r4, #1
   d51ae:	4620      	mov	r0, r4
   d51b0:	f7ff fa5c 	bl	d466c <malloc>
   d51b4:	b920      	cbnz	r0, d51c0 <_ZnwjRKSt9nothrow_t+0x1c>
   d51b6:	f7ff ffe9 	bl	d518c <_ZSt15get_new_handlerv>
   d51ba:	b108      	cbz	r0, d51c0 <_ZnwjRKSt9nothrow_t+0x1c>
   d51bc:	4780      	blx	r0
   d51be:	e7f6      	b.n	d51ae <_ZnwjRKSt9nothrow_t+0xa>
   d51c0:	bd10      	pop	{r4, pc}
	...

000d51c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51c4:	4b18      	ldr	r3, [pc, #96]	; (d5228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51c6:	681a      	ldr	r2, [r3, #0]
   d51c8:	07d1      	lsls	r1, r2, #31
   d51ca:	bf5c      	itt	pl
   d51cc:	2201      	movpl	r2, #1
   d51ce:	601a      	strpl	r2, [r3, #0]
   d51d0:	4b16      	ldr	r3, [pc, #88]	; (d522c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51d2:	681a      	ldr	r2, [r3, #0]
   d51d4:	07d2      	lsls	r2, r2, #31
   d51d6:	bf5c      	itt	pl
   d51d8:	2201      	movpl	r2, #1
   d51da:	601a      	strpl	r2, [r3, #0]
   d51dc:	4b14      	ldr	r3, [pc, #80]	; (d5230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51de:	681a      	ldr	r2, [r3, #0]
   d51e0:	07d0      	lsls	r0, r2, #31
   d51e2:	bf5c      	itt	pl
   d51e4:	2201      	movpl	r2, #1
   d51e6:	601a      	strpl	r2, [r3, #0]
   d51e8:	4b12      	ldr	r3, [pc, #72]	; (d5234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d51ea:	681a      	ldr	r2, [r3, #0]
   d51ec:	07d1      	lsls	r1, r2, #31
   d51ee:	bf5c      	itt	pl
   d51f0:	2201      	movpl	r2, #1
   d51f2:	601a      	strpl	r2, [r3, #0]
   d51f4:	4b10      	ldr	r3, [pc, #64]	; (d5238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d51f6:	681a      	ldr	r2, [r3, #0]
   d51f8:	07d2      	lsls	r2, r2, #31
   d51fa:	bf5c      	itt	pl
   d51fc:	2201      	movpl	r2, #1
   d51fe:	601a      	strpl	r2, [r3, #0]
   d5200:	4b0e      	ldr	r3, [pc, #56]	; (d523c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5202:	681a      	ldr	r2, [r3, #0]
   d5204:	07d0      	lsls	r0, r2, #31
   d5206:	bf5c      	itt	pl
   d5208:	2201      	movpl	r2, #1
   d520a:	601a      	strpl	r2, [r3, #0]
   d520c:	4b0c      	ldr	r3, [pc, #48]	; (d5240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d520e:	681a      	ldr	r2, [r3, #0]
   d5210:	07d1      	lsls	r1, r2, #31
   d5212:	bf5c      	itt	pl
   d5214:	2201      	movpl	r2, #1
   d5216:	601a      	strpl	r2, [r3, #0]
   d5218:	4b0a      	ldr	r3, [pc, #40]	; (d5244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d521a:	681a      	ldr	r2, [r3, #0]
   d521c:	07d2      	lsls	r2, r2, #31
   d521e:	bf5c      	itt	pl
   d5220:	2201      	movpl	r2, #1
   d5222:	601a      	strpl	r2, [r3, #0]
   d5224:	4770      	bx	lr
   d5226:	bf00      	nop
   d5228:	2003e76c 	.word	0x2003e76c
   d522c:	2003e768 	.word	0x2003e768
   d5230:	2003e764 	.word	0x2003e764
   d5234:	2003e760 	.word	0x2003e760
   d5238:	2003e75c 	.word	0x2003e75c
   d523c:	2003e758 	.word	0x2003e758
   d5240:	2003e754 	.word	0x2003e754
   d5244:	2003e750 	.word	0x2003e750

000d5248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5248:	4b24      	ldr	r3, [pc, #144]	; (d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d524a:	681a      	ldr	r2, [r3, #0]
   d524c:	07d0      	lsls	r0, r2, #31
   d524e:	bf5c      	itt	pl
   d5250:	2201      	movpl	r2, #1
   d5252:	601a      	strpl	r2, [r3, #0]
   d5254:	4b22      	ldr	r3, [pc, #136]	; (d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5256:	681a      	ldr	r2, [r3, #0]
   d5258:	07d1      	lsls	r1, r2, #31
   d525a:	bf5c      	itt	pl
   d525c:	2201      	movpl	r2, #1
   d525e:	601a      	strpl	r2, [r3, #0]
   d5260:	4b20      	ldr	r3, [pc, #128]	; (d52e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5262:	681a      	ldr	r2, [r3, #0]
   d5264:	07d2      	lsls	r2, r2, #31
   d5266:	bf5c      	itt	pl
   d5268:	2201      	movpl	r2, #1
   d526a:	601a      	strpl	r2, [r3, #0]
   d526c:	4b1e      	ldr	r3, [pc, #120]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d526e:	681a      	ldr	r2, [r3, #0]
   d5270:	07d0      	lsls	r0, r2, #31
   d5272:	bf5c      	itt	pl
   d5274:	2201      	movpl	r2, #1
   d5276:	601a      	strpl	r2, [r3, #0]
   d5278:	4b1c      	ldr	r3, [pc, #112]	; (d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	07d1      	lsls	r1, r2, #31
   d527e:	bf5c      	itt	pl
   d5280:	2201      	movpl	r2, #1
   d5282:	601a      	strpl	r2, [r3, #0]
   d5284:	4b1a      	ldr	r3, [pc, #104]	; (d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5286:	681a      	ldr	r2, [r3, #0]
   d5288:	07d2      	lsls	r2, r2, #31
   d528a:	bf5c      	itt	pl
   d528c:	2201      	movpl	r2, #1
   d528e:	601a      	strpl	r2, [r3, #0]
   d5290:	4b18      	ldr	r3, [pc, #96]	; (d52f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5292:	681a      	ldr	r2, [r3, #0]
   d5294:	07d0      	lsls	r0, r2, #31
   d5296:	bf5c      	itt	pl
   d5298:	2201      	movpl	r2, #1
   d529a:	601a      	strpl	r2, [r3, #0]
   d529c:	4b16      	ldr	r3, [pc, #88]	; (d52f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d529e:	681a      	ldr	r2, [r3, #0]
   d52a0:	07d1      	lsls	r1, r2, #31
   d52a2:	bf5c      	itt	pl
   d52a4:	2201      	movpl	r2, #1
   d52a6:	601a      	strpl	r2, [r3, #0]
   d52a8:	4b14      	ldr	r3, [pc, #80]	; (d52fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d52aa:	681a      	ldr	r2, [r3, #0]
   d52ac:	07d2      	lsls	r2, r2, #31
   d52ae:	bf5c      	itt	pl
   d52b0:	2201      	movpl	r2, #1
   d52b2:	601a      	strpl	r2, [r3, #0]
   d52b4:	4b12      	ldr	r3, [pc, #72]	; (d5300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d52b6:	681a      	ldr	r2, [r3, #0]
   d52b8:	07d0      	lsls	r0, r2, #31
   d52ba:	bf5c      	itt	pl
   d52bc:	2201      	movpl	r2, #1
   d52be:	601a      	strpl	r2, [r3, #0]
   d52c0:	4b10      	ldr	r3, [pc, #64]	; (d5304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d52c2:	681a      	ldr	r2, [r3, #0]
   d52c4:	07d1      	lsls	r1, r2, #31
   d52c6:	bf5c      	itt	pl
   d52c8:	2201      	movpl	r2, #1
   d52ca:	601a      	strpl	r2, [r3, #0]
   d52cc:	4b0e      	ldr	r3, [pc, #56]	; (d5308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d52ce:	681a      	ldr	r2, [r3, #0]
   d52d0:	07d2      	lsls	r2, r2, #31
   d52d2:	bf5c      	itt	pl
   d52d4:	2201      	movpl	r2, #1
   d52d6:	601a      	strpl	r2, [r3, #0]
   d52d8:	4770      	bx	lr
   d52da:	bf00      	nop
   d52dc:	2003e79c 	.word	0x2003e79c
   d52e0:	2003e798 	.word	0x2003e798
   d52e4:	2003e794 	.word	0x2003e794
   d52e8:	2003e790 	.word	0x2003e790
   d52ec:	2003e78c 	.word	0x2003e78c
   d52f0:	2003e788 	.word	0x2003e788
   d52f4:	2003e784 	.word	0x2003e784
   d52f8:	2003e780 	.word	0x2003e780
   d52fc:	2003e77c 	.word	0x2003e77c
   d5300:	2003e778 	.word	0x2003e778
   d5304:	2003e774 	.word	0x2003e774
   d5308:	2003e770 	.word	0x2003e770

000d530c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d530c:	4b24      	ldr	r3, [pc, #144]	; (d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d530e:	681a      	ldr	r2, [r3, #0]
   d5310:	07d0      	lsls	r0, r2, #31
   d5312:	bf5c      	itt	pl
   d5314:	2201      	movpl	r2, #1
   d5316:	601a      	strpl	r2, [r3, #0]
   d5318:	4b22      	ldr	r3, [pc, #136]	; (d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d531a:	681a      	ldr	r2, [r3, #0]
   d531c:	07d1      	lsls	r1, r2, #31
   d531e:	bf5c      	itt	pl
   d5320:	2201      	movpl	r2, #1
   d5322:	601a      	strpl	r2, [r3, #0]
   d5324:	4b20      	ldr	r3, [pc, #128]	; (d53a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5326:	681a      	ldr	r2, [r3, #0]
   d5328:	07d2      	lsls	r2, r2, #31
   d532a:	bf5c      	itt	pl
   d532c:	2201      	movpl	r2, #1
   d532e:	601a      	strpl	r2, [r3, #0]
   d5330:	4b1e      	ldr	r3, [pc, #120]	; (d53ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5332:	681a      	ldr	r2, [r3, #0]
   d5334:	07d0      	lsls	r0, r2, #31
   d5336:	bf5c      	itt	pl
   d5338:	2201      	movpl	r2, #1
   d533a:	601a      	strpl	r2, [r3, #0]
   d533c:	4b1c      	ldr	r3, [pc, #112]	; (d53b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d533e:	681a      	ldr	r2, [r3, #0]
   d5340:	07d1      	lsls	r1, r2, #31
   d5342:	bf5c      	itt	pl
   d5344:	2201      	movpl	r2, #1
   d5346:	601a      	strpl	r2, [r3, #0]
   d5348:	4b1a      	ldr	r3, [pc, #104]	; (d53b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d534a:	681a      	ldr	r2, [r3, #0]
   d534c:	07d2      	lsls	r2, r2, #31
   d534e:	bf5c      	itt	pl
   d5350:	2201      	movpl	r2, #1
   d5352:	601a      	strpl	r2, [r3, #0]
   d5354:	4b18      	ldr	r3, [pc, #96]	; (d53b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5356:	681a      	ldr	r2, [r3, #0]
   d5358:	07d0      	lsls	r0, r2, #31
   d535a:	bf5c      	itt	pl
   d535c:	2201      	movpl	r2, #1
   d535e:	601a      	strpl	r2, [r3, #0]
   d5360:	4b16      	ldr	r3, [pc, #88]	; (d53bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5362:	681a      	ldr	r2, [r3, #0]
   d5364:	07d1      	lsls	r1, r2, #31
   d5366:	bf5c      	itt	pl
   d5368:	2201      	movpl	r2, #1
   d536a:	601a      	strpl	r2, [r3, #0]
   d536c:	4b14      	ldr	r3, [pc, #80]	; (d53c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	07d2      	lsls	r2, r2, #31
   d5372:	bf5c      	itt	pl
   d5374:	2201      	movpl	r2, #1
   d5376:	601a      	strpl	r2, [r3, #0]
   d5378:	4b12      	ldr	r3, [pc, #72]	; (d53c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d537a:	681a      	ldr	r2, [r3, #0]
   d537c:	07d0      	lsls	r0, r2, #31
   d537e:	bf5c      	itt	pl
   d5380:	2201      	movpl	r2, #1
   d5382:	601a      	strpl	r2, [r3, #0]
   d5384:	4b10      	ldr	r3, [pc, #64]	; (d53c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5386:	681a      	ldr	r2, [r3, #0]
   d5388:	07d1      	lsls	r1, r2, #31
   d538a:	bf5c      	itt	pl
   d538c:	2201      	movpl	r2, #1
   d538e:	601a      	strpl	r2, [r3, #0]
   d5390:	4b0e      	ldr	r3, [pc, #56]	; (d53cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	07d2      	lsls	r2, r2, #31
   d5396:	bf5c      	itt	pl
   d5398:	2201      	movpl	r2, #1
   d539a:	601a      	strpl	r2, [r3, #0]
   d539c:	4770      	bx	lr
   d539e:	bf00      	nop
   d53a0:	2003e7cc 	.word	0x2003e7cc
   d53a4:	2003e7c8 	.word	0x2003e7c8
   d53a8:	2003e7c4 	.word	0x2003e7c4
   d53ac:	2003e7c0 	.word	0x2003e7c0
   d53b0:	2003e7bc 	.word	0x2003e7bc
   d53b4:	2003e7b8 	.word	0x2003e7b8
   d53b8:	2003e7b4 	.word	0x2003e7b4
   d53bc:	2003e7b0 	.word	0x2003e7b0
   d53c0:	2003e7ac 	.word	0x2003e7ac
   d53c4:	2003e7a8 	.word	0x2003e7a8
   d53c8:	2003e7a4 	.word	0x2003e7a4
   d53cc:	2003e7a0 	.word	0x2003e7a0

000d53d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53d0:	4b18      	ldr	r3, [pc, #96]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53d2:	681a      	ldr	r2, [r3, #0]
   d53d4:	07d1      	lsls	r1, r2, #31
   d53d6:	bf5c      	itt	pl
   d53d8:	2201      	movpl	r2, #1
   d53da:	601a      	strpl	r2, [r3, #0]
   d53dc:	4b16      	ldr	r3, [pc, #88]	; (d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53de:	681a      	ldr	r2, [r3, #0]
   d53e0:	07d2      	lsls	r2, r2, #31
   d53e2:	bf5c      	itt	pl
   d53e4:	2201      	movpl	r2, #1
   d53e6:	601a      	strpl	r2, [r3, #0]
   d53e8:	4b14      	ldr	r3, [pc, #80]	; (d543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53ea:	681a      	ldr	r2, [r3, #0]
   d53ec:	07d0      	lsls	r0, r2, #31
   d53ee:	bf5c      	itt	pl
   d53f0:	2201      	movpl	r2, #1
   d53f2:	601a      	strpl	r2, [r3, #0]
   d53f4:	4b12      	ldr	r3, [pc, #72]	; (d5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53f6:	681a      	ldr	r2, [r3, #0]
   d53f8:	07d1      	lsls	r1, r2, #31
   d53fa:	bf5c      	itt	pl
   d53fc:	2201      	movpl	r2, #1
   d53fe:	601a      	strpl	r2, [r3, #0]
   d5400:	4b10      	ldr	r3, [pc, #64]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5402:	681a      	ldr	r2, [r3, #0]
   d5404:	07d2      	lsls	r2, r2, #31
   d5406:	bf5c      	itt	pl
   d5408:	2201      	movpl	r2, #1
   d540a:	601a      	strpl	r2, [r3, #0]
   d540c:	4b0e      	ldr	r3, [pc, #56]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d540e:	681a      	ldr	r2, [r3, #0]
   d5410:	07d0      	lsls	r0, r2, #31
   d5412:	bf5c      	itt	pl
   d5414:	2201      	movpl	r2, #1
   d5416:	601a      	strpl	r2, [r3, #0]
   d5418:	4b0c      	ldr	r3, [pc, #48]	; (d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d541a:	681a      	ldr	r2, [r3, #0]
   d541c:	07d1      	lsls	r1, r2, #31
   d541e:	bf5c      	itt	pl
   d5420:	2201      	movpl	r2, #1
   d5422:	601a      	strpl	r2, [r3, #0]
   d5424:	4b0a      	ldr	r3, [pc, #40]	; (d5450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5426:	681a      	ldr	r2, [r3, #0]
   d5428:	07d2      	lsls	r2, r2, #31
   d542a:	bf5c      	itt	pl
   d542c:	2201      	movpl	r2, #1
   d542e:	601a      	strpl	r2, [r3, #0]
   d5430:	4770      	bx	lr
   d5432:	bf00      	nop
   d5434:	2003e7ec 	.word	0x2003e7ec
   d5438:	2003e7e8 	.word	0x2003e7e8
   d543c:	2003e7e4 	.word	0x2003e7e4
   d5440:	2003e7e0 	.word	0x2003e7e0
   d5444:	2003e7dc 	.word	0x2003e7dc
   d5448:	2003e7d8 	.word	0x2003e7d8
   d544c:	2003e7d4 	.word	0x2003e7d4
   d5450:	2003e7d0 	.word	0x2003e7d0

000d5454 <__cxa_atexit>:
   d5454:	b510      	push	{r4, lr}
   d5456:	4c05      	ldr	r4, [pc, #20]	; (d546c <__cxa_atexit+0x18>)
   d5458:	4613      	mov	r3, r2
   d545a:	b12c      	cbz	r4, d5468 <__cxa_atexit+0x14>
   d545c:	460a      	mov	r2, r1
   d545e:	4601      	mov	r1, r0
   d5460:	2002      	movs	r0, #2
   d5462:	f3af 8000 	nop.w
   d5466:	bd10      	pop	{r4, pc}
   d5468:	4620      	mov	r0, r4
   d546a:	bd10      	pop	{r4, pc}
   d546c:	00000000 	.word	0x00000000

000d5470 <memcpy>:
   d5470:	b510      	push	{r4, lr}
   d5472:	1e43      	subs	r3, r0, #1
   d5474:	440a      	add	r2, r1
   d5476:	4291      	cmp	r1, r2
   d5478:	d004      	beq.n	d5484 <memcpy+0x14>
   d547a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d547e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5482:	e7f8      	b.n	d5476 <memcpy+0x6>
   d5484:	bd10      	pop	{r4, pc}

000d5486 <memset>:
   d5486:	4402      	add	r2, r0
   d5488:	4603      	mov	r3, r0
   d548a:	4293      	cmp	r3, r2
   d548c:	d002      	beq.n	d5494 <memset+0xe>
   d548e:	f803 1b01 	strb.w	r1, [r3], #1
   d5492:	e7fa      	b.n	d548a <memset+0x4>
   d5494:	4770      	bx	lr
	...

000d5498 <srand>:
   d5498:	b538      	push	{r3, r4, r5, lr}
   d549a:	4b12      	ldr	r3, [pc, #72]	; (d54e4 <srand+0x4c>)
   d549c:	681c      	ldr	r4, [r3, #0]
   d549e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54a0:	4605      	mov	r5, r0
   d54a2:	b9d3      	cbnz	r3, d54da <srand+0x42>
   d54a4:	2018      	movs	r0, #24
   d54a6:	f7ff f8e1 	bl	d466c <malloc>
   d54aa:	f243 330e 	movw	r3, #13070	; 0x330e
   d54ae:	63a0      	str	r0, [r4, #56]	; 0x38
   d54b0:	8003      	strh	r3, [r0, #0]
   d54b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d54b6:	8043      	strh	r3, [r0, #2]
   d54b8:	f241 2334 	movw	r3, #4660	; 0x1234
   d54bc:	8083      	strh	r3, [r0, #4]
   d54be:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d54c2:	80c3      	strh	r3, [r0, #6]
   d54c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d54c8:	8103      	strh	r3, [r0, #8]
   d54ca:	2305      	movs	r3, #5
   d54cc:	8143      	strh	r3, [r0, #10]
   d54ce:	230b      	movs	r3, #11
   d54d0:	8183      	strh	r3, [r0, #12]
   d54d2:	2201      	movs	r2, #1
   d54d4:	2300      	movs	r3, #0
   d54d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d54da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54dc:	2200      	movs	r2, #0
   d54de:	611d      	str	r5, [r3, #16]
   d54e0:	615a      	str	r2, [r3, #20]
   d54e2:	bd38      	pop	{r3, r4, r5, pc}
   d54e4:	2003e3ac 	.word	0x2003e3ac

000d54e8 <strlen>:
   d54e8:	4603      	mov	r3, r0
   d54ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   d54ee:	2a00      	cmp	r2, #0
   d54f0:	d1fb      	bne.n	d54ea <strlen+0x2>
   d54f2:	1a18      	subs	r0, r3, r0
   d54f4:	3801      	subs	r0, #1
   d54f6:	4770      	bx	lr

000d54f8 <dynalib_user>:
   d54f8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5508:	0000 0000 2020 7700 6f72 676e 6320 6568     ....  .wrong che
   d5518:	6b63 7553 216d 2121 0021 2d2d 2d2d 2d2d     ckSum!!!!.------
   d5528:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d5538:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d5548:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d5558:	2d2d 2d2d 5300 7265 6169 206c 7473 7261     ----.Serial star
   d5568:	0074 4d48 3333 5830 6920 696e 2074 6166     t.HM330X init fa
   d5578:	6c69 6465 2121 0021 4d48 3333 5830 7220     iled!!!.HM330X r
   d5588:	6165 2064 6572 7573 746c 6620 6961 656c     ead result faile
   d5598:	2164 2121 5300 6174 7472 6e69 2067 6944     d!!!.Starting Di
   d55a8:	7073 616c 0079 7250 6e69 6974 676e 4320     splay.Printing C
   d55b8:	6e6f 6563 746e 6172 6974 6e6f 0073 4d50     oncentrations.PM
   d55c8:	2e32 2035 6144 6174 7300 6e65 6f73 2072     2.5 Data.sensor 
   d55d8:	756e 3a6d 0020 4d50 2e31 2030 6f63 636e     num: .PM1.0 conc
   d55e8:	6e65 7274 7461 6f69 286e 4643 313d 532c     entration(CF=1,S
   d55f8:	6174 646e 7261 2064 6170 7472 6369 6c75     tandard particul
   d5608:	7461 2065 616d 7474 7265 752c 696e 3a74     ate matter,unit:
   d5618:	6775 6d2f 2933 203a 5000 324d 352e 6320     ug/m3): .PM2.5 c
   d5628:	6e6f 6563 746e 6172 6974 6e6f 4328 3d46     oncentration(CF=
   d5638:	2c31 7453 6e61 6164 6472 7020 7261 6974     1,Standard parti
   d5648:	7563 616c 6574 6d20 7461 6574 2c72 6e75     culate matter,un
   d5658:	7469 753a 2f67 336d 3a29 0020 4d50 3031     it:ug/m3): .PM10
   d5668:	6320 6e6f 6563 746e 6172 6974 6e6f 4328      concentration(C
   d5678:	3d46 2c31 7453 6e61 6164 6472 7020 7261     F=1,Standard par
   d5688:	6974 7563 616c 6574 6d20 7461 6574 2c72     ticulate matter,
   d5698:	6e75 7469 753a 2f67 336d 3a29 0020 4d50     unit:ug/m3): .PM
   d56a8:	2e31 2030 6f63 636e 6e65 7274 7461 6f69     1.0 concentratio
   d56b8:	286e 7441 6f6d 7073 6568 6972 2063 6e65     n(Atmospheric en
   d56c8:	6976 6f72 6d6e 6e65 2c74 6e75 7469 753a     vironment,unit:u
   d56d8:	2f67 336d 3a29 0020 4d50 2e32 2035 6f63     g/m3): .PM2.5 co
   d56e8:	636e 6e65 7274 7461 6f69 286e 7441 6f6d     ncentration(Atmo
   d56f8:	7073 6568 6972 2063 6e65 6976 6f72 6d6e     spheric environm
   d5708:	6e65 2c74 6e75 7469 753a 2f67 336d 3a29     ent,unit:ug/m3):
   d5718:	0020 4d50 3031 6320 6e6f 6563 746e 6172      .PM10 concentra
   d5728:	6974 6e6f 4128 6d74 736f 6870 7265 6369     tion(Atmospheric
   d5738:	6520 766e 7269 6e6f 656d 746e 752c 696e      environment,uni
   d5748:	3a74 6775 6d2f 2933 203a 0000               t:ug/m3): ..

000d5754 <_ZTVN5spark13EthernetClassE>:
	...
   d575c:	46eb 000d 46e1 000d 46d7 000d 46cd 000d     .F...F...F...F..
   d576c:	46c1 000d 46b5 000d 46a9 000d 46a1 000d     .F...F...F...F..
   d577c:	4697 000d 468d 000d 5021 000d 6162 6475     .F...F..!P..baud
   d578c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d579c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d57ac:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d57bc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d57cc:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d57dc:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d57ec:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d57fc:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d580c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d581c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d582c:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d583c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d584c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d585c:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d586c:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d587c:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d588c:	7463 6d69 0065 0000                         ctime...

000d5894 <_ZTV9IPAddress>:
	...
   d589c:	49e1 000d 49d1 000d 49d3 000d               .I...I...I..

000d58a8 <_ZTV9USBSerial>:
	...
   d58b0:	4ab9 000d 4b09 000d 4b17 000d 4795 000d     .J...K...K...G..
   d58c0:	4af5 000d 4abb 000d 4ad1 000d 4b03 000d     .J...J...J...K..
   d58d0:	4ae7 000d 4ab5 000d                         .J...J..

000d58d8 <_ZTV11USARTSerial>:
	...
   d58e0:	4bc5 000d 4c15 000d 4c23 000d 4795 000d     .K...L..#L...G..
   d58f0:	4bd9 000d 4bfb 000d 4be7 000d 4c0f 000d     .K...K...K...L..
   d5900:	4bc7 000d 4bcb 000d                         .K...K..

000d5908 <_ZTV7TwoWire>:
	...
   d5910:	4cc1 000d 4d0b 000d 4ce3 000d 4cc3 000d     .L...M...L...L..
   d5920:	4ceb 000d 4cf3 000d 4cfb 000d 4d03 000d     .L...L...L...M..

000d5930 <_ZTVN5spark9MeshClassE>:
	...
   d5938:	4e1f 000d 4e15 000d 4e0b 000d 4e01 000d     .N...N...N...N..
   d5948:	4df5 000d 4de9 000d 4ddd 000d 4dd5 000d     .M...M...M...M..
   d5958:	4dcb 000d 4dc1 000d 5021 000d               .M...M..!P..

000d5964 <_ZTVN5spark9WiFiClassE>:
	...
   d596c:	4f9b 000d 4f91 000d 4f87 000d 4f3d 000d     .O...O...O..=O..
   d597c:	4f7b 000d 4f6f 000d 4f63 000d 4f5b 000d     {O..oO..cO..[O..
   d598c:	4f51 000d 4f47 000d 5021 000d               QO..GO..!P..

000d5998 <_ZTVN5spark12NetworkClassE>:
	...
   d59a0:	4fb9 000d 4fc3 000d 4fcd 000d 4fd7 000d     .O...O...O...O..
   d59b0:	4fe1 000d 4fed 000d 4ff9 000d 5005 000d     .O...O...O...P..
   d59c0:	500d 000d 5017 000d 5021 000d               .P...P..!P..

000d59cc <_ZSt7nothrow>:
   d59cc:	0000 0000                                   ....

000d59d0 <__sf_fake_stdin>:
	...

000d59f0 <__sf_fake_stdout>:
	...

000d5a10 <__sf_fake_stderr>:
	...
   d5a30:	0043                                        C.

000d5a32 <link_const_variable_data_end>:
	...

000d5a34 <link_constructors_location>:
   d5a34:	000d4279 	.word	0x000d4279
   d5a38:	000d42c5 	.word	0x000d42c5
   d5a3c:	000d433f 	.word	0x000d433f
   d5a40:	000d46f5 	.word	0x000d46f5
   d5a44:	000d4729 	.word	0x000d4729
   d5a48:	000d476d 	.word	0x000d476d
   d5a4c:	000d485d 	.word	0x000d485d
   d5a50:	000d486d 	.word	0x000d486d
   d5a54:	000d48a5 	.word	0x000d48a5
   d5a58:	000d4eed 	.word	0x000d4eed
   d5a5c:	000d4fa5 	.word	0x000d4fa5
   d5a60:	000d50ed 	.word	0x000d50ed
   d5a64:	000d51c5 	.word	0x000d51c5
   d5a68:	000d5249 	.word	0x000d5249
   d5a6c:	000d530d 	.word	0x000d530d
   d5a70:	000d53d1 	.word	0x000d53d1

000d5a74 <link_constructors_end>:
	...
